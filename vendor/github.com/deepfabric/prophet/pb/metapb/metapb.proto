syntax = "proto3";
package metapb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_enum_prefix_all) = true;

// Action the action while a new node join the cluster
enum Action {
    None     = 0;
    ScaleOut = 1;
}

// ResourceKind the resource king
enum ResourceKind {
    LeaderKind     = 0;
    ReplicaKind    = 1;
}

// State the container state
enum ContainerState {
    // UP is normal state
    UP        = 0;
    // Offline is the unavailable state
    Offline   = 1;
    // Tombstone is the destory state
    Tombstone = 2;
}

// ChangePeerType change peer type
enum ChangePeerType {
    AddNode        = 0;
    RemoveNode     = 1;
    AddLearnerNode = 2;
    ScalePeer      = 3;
}

// PeerRole role of current peer
enum PeerRole {
    Voter         = 0;
    Learner       = 1;
    IncomingVoter = 2;
    DemotingVoter = 3;
}

// CheckPolicy check policy
enum CheckPolicy {
    SCAN        = 0;
    APPROXIMATE = 1;
    USEKEY      = 2;
}

// OperatorStatus Operator Status
enum OperatorStatus {
    SUCCESS = 0;
	TIMEOUT = 1;
	CANCEL  = 2;
	REPLACE = 3;
	RUNNING = 4;
}

// ResourceEpoch resource epoch
message ResourceEpoch {
    // Conf change version, auto increment when add or remove peer
    uint64 confVer = 1;
    // Resource version, auto increment when split or merge
    uint64 version = 2;
}

// Peer is a replica of the resource, we called peer
message Peer {
    uint64   id          = 1 [(gogoproto.customname) = "ID"];
    uint64   containerID = 2;
    PeerRole role        = 3;
}

// PeerStats peer stats
message PeerStats {
    Peer   peer        = 1 [(gogoproto.nullable) = false];
	uint64 downSeconds = 2;
}

// Pair key value pair
message Pair {
    string key   = 1;
    string value = 2;
}

// Timestamp tso timestamp
message Timestamp {
    int64 physical = 1;
    int64 logical  = 2;
}

// ResourceStat resource stat
message ResourceStat {
    // Bytes written for the container during this period.
    uint64       bytesWritten       = 1;
    // Bytes read for the container during this period.
    uint64       bytesRead          = 2;
    // Bytes written for the container during this period.
    uint64       keysWritten        = 3;
    // Bytes read for the container during this period.
    uint64       keysRead           = 4;
}

// Member prophet member
message Member {
    uint64 id   = 1 [(gogoproto.customname) = "ID"];
    string name = 2;
    string addr = 3;
}

// Cluster prophet cluster
message Cluster {
    uint64 id           = 1 [(gogoproto.customname) = "ID"];
    uint32 maxPeerCount = 2;
}