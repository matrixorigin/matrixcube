# Define workflow name.
name: Build MatrixCube

# Controls when the workflow will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch.
  pull_request:
    branches: master
  # Allows dev to run this workflow manually from the Actions tab
  workflow_dispatch:
    
# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  # This workflow contains a single job called "build".
  build:
    # The type of runner that the job will run on.
    runs-on: ${{ matrix.os }}
    
    # Define a matrix of different job configurations. 
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-11
        # Configures the node version used on GitHub-hosted runners.
        node_version:
          - 16
        architecture:
          - x64
        go-version:
          - 1.17
    name: Build on ${{ matrix.architecture }}/${{ matrix.os }}/Go v${{ matrix.go-version }}
    
    # Steps represent a sequence of tasks that will be executed as part of the job.
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so the job can access it.
      - uses: actions/checkout@v2
      
      # Set up build node
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node_version }}
          architecture: ${{ matrix.architecture }}

      - name: Pre-configue build environment on ${{ matrix.os }}
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt -y install dstat inxi
          SRS_LOG="srs-lnx.log"
          inxi -F -m -c 0 > "$SRS_LOG"
          seq -s = 80|tr -d '[:digit:]' >> "$SRS_LOG"
          nohup dstat -tcmdngspy 2 >> "$SRS_LOG" 2>&1 &

      - name: Install compiler Go 
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}

      - name: Build
        run: |
          cd $GITHUB_WORKSPACE && make test
          sleep 2

      - name: Show system resource statistics
        if: ${{ always() }}
        run: |
          SRS_LOG="srs-lnx.log"
          if [ -f "$SRS_LOG" ]; then
            cat "$SRS_LOG"
          else
            system_profiler SPHardwareDataType
          fi