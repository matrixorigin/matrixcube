syntax = "proto3";
package rpcpb;

import "github.com/matrixorigin/matrixcube/components/prophet/pb/metapb/metapb.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_enum_prefix_all) = false;

// Type rpc type
enum Type {
    TypeRegisterContainer     = 0;
    TypeResourceHeartbeatReq  = 1;
	TypeResourceHeartbeatRsp  = 2;
	TypeContainerHeartbeatReq = 3;
	TypeContainerHeartbeatRsp = 4;
    TypePutContainerReq       = 5;
	TypePutContainerRsp       = 6;
	TypeGetContainerReq       = 7;
	TypeGetContainerRsp       = 8;
	TypeAllocIDReq            = 9;
	TypeAllocIDRsp            = 10;
    TypeAskBatchSplitReq      = 11;
	TypeAskBatchSplitRsp      = 12;
    TypeCreateDestroyingReq   = 13;
    TypeCreateDestroyingRsp   = 14;
    TypeReportDestroyedReq   = 15;
    TypeReportDestroyedRsp   = 16;
    TypeGetDestroyingReq      = 17;
	TypeGetDestroyingRsp      = 18;
    TypeCreateWatcherReq      = 19;
    TypeEventNotify           = 20;
    TypeCreateResourcesReq    = 21;
    TypeCreateResourcesRsp    = 22;
    TypeRemoveResourcesReq    = 23;
    TypeRemoveResourcesRsp    = 24;
    TypeCheckResourceStateReq = 25;
    TypeCheckResourceStateRsp = 26;
    TypePutPlacementRuleReq   = 27;
    TypePutPlacementRuleRsp   = 28;
    TypeGetAppliedRulesReq    = 29;
    TypeGetAppliedRulesRsp    = 30;
    TypeCreateJobReq          = 31;
    TypeCreateJobRsp          = 32;
    TypeRemoveJobReq          = 33;
    TypeRemoveJobRsp          = 34;
    TypeExecuteJobReq         = 35;
    TypeExecuteJobRsp         = 36;
    TypeAddScheduleGroupRuleReq  = 37;
    TypeAddScheduleGroupRuleRsp  = 38;
    TypeGetScheduleGroupRuleReq  = 39;
    TypeGetScheduleGroupRuleRsp  = 40;
}

// Request the prophet rpc request
message Request {
    uint64                id                 = 1  [(gogoproto.customname) = "ID"];
    uint64                containerID        = 2;
    Type                  type               = 3;
    ResourceHeartbeatReq  resourceHeartbeat  = 4  [(gogoproto.nullable) = false]; 
    ContainerHeartbeatReq containerHeartbeat = 5  [(gogoproto.nullable) = false]; 
    PutContainerReq       putContainer       = 6  [(gogoproto.nullable) = false]; 
    GetContainerReq       getContainer       = 7  [(gogoproto.nullable) = false];
    AllocIDReq            allocID            = 8  [(gogoproto.nullable) = false];
    AskBatchSplitReq      askBatchSplit      = 9  [(gogoproto.nullable) = false];
    CreateDestroyingReq   createDestroying   = 10 [(gogoproto.nullable) = false];
    ReportDestroyedReq   ReportDestroyed   = 11 [(gogoproto.nullable) = false];
    GetDestroyingReq      getDestroying      = 12 [(gogoproto.nullable) = false];
    CreateWatcherReq      createWatcher      = 13 [(gogoproto.nullable) = false];
    CreateResourcesReq    createResources    = 14 [(gogoproto.nullable) = false];
    RemoveResourcesReq    removeResources    = 15 [(gogoproto.nullable) = false];
    CheckResourceStateReq checkResourceState = 16 [(gogoproto.nullable) = false];
    PutPlacementRuleReq   putPlacementRule   = 17 [(gogoproto.nullable) = false];
    GetAppliedRulesReq    getAppliedRules    = 18 [(gogoproto.nullable) = false];
    CreateJobReq          createJob          = 19 [(gogoproto.nullable) = false];
    RemoveJobReq          removeJob          = 20 [(gogoproto.nullable) = false];
    ExecuteJobReq         executeJob         = 21 [(gogoproto.nullable) = false];
    AddScheduleGroupRuleReq         addScheduleGroupRule        = 22 [(gogoproto.nullable) = false];
    GetScheduleGroupRuleReq         getScheduleGroupRule        = 23 [(gogoproto.nullable) = false];
}

// Response the prophet rpc response
message Response {
    uint64                id                 = 1  [(gogoproto.customname) = "ID"];
    Type                  type               = 2;
    string                error              = 3;
    string                leader             = 4;
    ResourceHeartbeatRsp  resourceHeartbeat  = 5  [(gogoproto.nullable) = false]; 
    ContainerHeartbeatRsp containerHeartbeat = 6  [(gogoproto.nullable) = false]; 
    PutContainerRsp       putContainer       = 7  [(gogoproto.nullable) = false]; 
    GetContainerRsp       getContainer       = 8  [(gogoproto.nullable) = false];
    AllocIDRsp            allocID            = 9  [(gogoproto.nullable) = false];
    AskBatchSplitRsp      askBatchSplit      = 10 [(gogoproto.nullable) = false];
    CreateDestroyingRsp   createDestroying   = 11 [(gogoproto.nullable) = false];
    ReportDestroyedRsp   ReportDestroyed   = 12 [(gogoproto.nullable) = false];
    GetDestroyingRsp      getDestroying      = 13 [(gogoproto.nullable) = false];
    EventNotify           event              = 14 [(gogoproto.nullable) = false];
    CreateResourcesRsp    createResources    = 15 [(gogoproto.nullable) = false];
    RemoveResourcesRsp    removeResources    = 16 [(gogoproto.nullable) = false];
    CheckResourceStateRsp checkResourceState = 17 [(gogoproto.nullable) = false];
    PutPlacementRuleRsp   putPlacementRule   = 18 [(gogoproto.nullable) = false];
    GetAppliedRulesRsp    getAppliedRules    = 19 [(gogoproto.nullable) = false];
    CreateJobRsp          createJob          = 20 [(gogoproto.nullable) = false];
    RemoveJobRsp          removeJob          = 21 [(gogoproto.nullable) = false];
    ExecuteJobRsp         executeJob         = 22 [(gogoproto.nullable) = false];
    AddScheduleGroupRuleRsp         addScheduleGroupRule        = 23 [(gogoproto.nullable) = false];
    GetScheduleGroupRuleRsp         getScheduleGroupRule        = 24 [(gogoproto.nullable) = false];
}

// ResourceHeartbeatReq resource heartbeat request
message ResourceHeartbeatReq {
             uint64               containerID     = 1;
             bytes                resource        = 2;
             // Term is the term of raft group.
             uint64               term            = 3;
             metapb.Replica          leader          = 4;
    repeated metapb.ReplicaStats     downReplicas       = 5 [(gogoproto.nullable) = false];
    repeated metapb.Replica          pendingReplicas    = 6 [(gogoproto.nullable) = false];
             metapb.ResourceStats stats           = 7 [(gogoproto.nullable) = false];
             string               groupKey        = 8;
}
   
// ResourceHeartbeatRsp resource heartbeat response.
message ResourceHeartbeatRsp {
    uint64               resourceID      = 1;
    metapb.ResourceEpoch resourceEpoch   = 2 [(gogoproto.nullable) = false];
    // Leader of the resource at the moment of the corresponding request was made.
    metapb.Replica         targetReplica      = 3;
    // Notice, prophet only allows handling reported epoch >= current prophet's.
    // Leader peer reports resource status with ResourceHeartbeatReq
    // to prophet regularly, prophet will determine whether this resource
    // should do ChangePeer or not.
    // E,g, max peer number is 3, resource A, first only peer 1 in A.
    // 1. prophet resource state -> Peers (1), ConfVer (1).
    // 2. Leader peer 1 reports resource state to prophet, prophet finds the
    // peer number is < 3, so first changes its current resource
    // state -> Peers (1, 2), ConfVer (1), and returns ChangePeer Adding 2.
    // 3. Leader does ChangePeer, then reports Peers (1, 2), ConfVer (2),
    // prophet updates its state -> Peers (1, 2), ConfVer (2).
    // 4. Leader may report old Peers (1), ConfVer (1) to pd before ConfChange
    // finished, pd stills responses ChangePeer Adding 2, of course, we must
    // guarantee the second ChangePeer can't be applied in your application.
    ConfigChange           configChange     = 4;
    TransferLeader       transferLeader  = 5;
    Merge                merge           = 6;
    SplitResource        splitResource   = 7;
    ConfigChangeV2         configChangeV2    = 8;
    // DestroyDirectly the resource has been removed, destroy directly without raft.
    bool                 destroyDirectly = 9;
}

// PutContainerReq put container request
message PutContainerReq {
    bytes container = 1;        
}

// PutContainerRsp put container response
message PutContainerRsp {
    bytes destroyResources = 1;
}

// ContainerHeartbeatReq container heartbeat request
message ContainerHeartbeatReq {
    metapb.ContainerStats stats = 1 [(gogoproto.nullable) = false];  
    bytes                 data  = 2;      
}

// ContainerHeartbeatRsp container heartbeat response
message ContainerHeartbeatRsp {
    bytes                 data  = 1;
}

// GetContainerReq get container request
message GetContainerReq {
    uint64 id = 1 [(gogoproto.customname) = "ID"];
}

// GetContainerRsp get container response
message GetContainerRsp {
    bytes                 data  = 1;
    metapb.ContainerStats stats = 2;
}

// AllocIDReq alloc id request
message AllocIDReq {
}

// AllocIDRsp alloc id response
message AllocIDRsp {
    uint64 id = 1 [(gogoproto.customname) = "ID"];
}

// AskBatchSplitReq ask batch split request
message AskBatchSplitReq {
    bytes  data  = 1;
    uint32 count = 2;
}

// AskBatchSplitRsp ask batch split response
message AskBatchSplitRsp {
    repeated SplitID splitIDs = 1 [(gogoproto.nullable) = false];
}


// CreateDestroyingReq create destroying status request
message CreateDestroyingReq {
    uint64            id        = 1 [(gogoproto.customname) = "ID"];
    uint64            index     = 2;
    repeated uint64 replicas    = 3;
    bool             removeData = 4;
}

// CreateDestroyingRsp create destroying status response
message CreateDestroyingRsp {
    metapb.ResourceState state = 1;
}

// GetDestroyingReq get destroying status request
message GetDestroyingReq {
    uint64            id        = 1 [(gogoproto.customname) = "ID"];
}

// GetDestroyingRsp get destroying status response
message GetDestroyingRsp {
    metapb.DestroyingStatus status = 1;
}

// ReportDestroyedReq report destroying request
message ReportDestroyedReq {
    uint64            id        = 1 [(gogoproto.customname) = "ID"];
    uint64            replicaID = 2;
}

// ReportDestroyedRsp report destroying rsp
message ReportDestroyedRsp {
    metapb.ResourceState state = 1;
}

// SplitID split id
message SplitID {
             uint64 newID      = 1;
    repeated uint64 newReplicaIDs = 2;
}

// CreateWatcherReq create watcher req
message CreateWatcherReq {
    uint32 flag = 1;
}

// CreateResourcesReq create resources req
message CreateResourcesReq {
    repeated bytes  resources   = 1;
    repeated uint64 leastReplicas  = 2;
}

// CreateResourcesRsp create resources rsp
message CreateResourcesRsp {
}

// RemoveResourcesReq remove resources req
message RemoveResourcesReq {
    repeated uint64 ids = 1 [(gogoproto.customname) = "IDs"];
}

// RemoveResourcesRsp remove resources rsp
message RemoveResourcesRsp {
}

// CheckResourceStateReq check resource state req
message CheckResourceStateReq {
    bytes ids = 1 [(gogoproto.customname) = "IDs"];
}

// CheckResourceStateReq check resource state rsp
message CheckResourceStateRsp {
    bytes destroyed  = 1;
    bytes destroying  = 2;
}

// PutPlacementRuleReq put placement rule req
message PutPlacementRuleReq {
    PlacementRule rule = 1 [(gogoproto.nullable) = false];
}

// PutPlacementRuleRsp put placement rule rsp
message PutPlacementRuleRsp {
}

// GetAppliedRulesReq get applied rules req
message GetAppliedRulesReq {
    uint64 resourceID = 1;
}

// GetAppliedRulesRsp get applied rules rsp
message GetAppliedRulesRsp {
    repeated PlacementRule rules = 1 [(gogoproto.nullable) = false];
}

// CreateJobReq create job req
message CreateJobReq {
    metapb.Job job = 1 [(gogoproto.nullable) = false];
}

// CreateJobRsp create job rsp
message CreateJobRsp {

}

// RemoveJobReq Remove job req
message RemoveJobReq {
    metapb.Job job = 1 [(gogoproto.nullable) = false];
}

// RemoveJobRsp Remove job rsp
message RemoveJobRsp {

}

// ExecuteJobReq execute on job request
message ExecuteJobReq {
    metapb.Job job  = 1 [(gogoproto.nullable) = false];
    bytes      data = 2;
}

// ExecuteJobRsp execute on job response
message ExecuteJobRsp {
    bytes      data = 1;
}

message AddScheduleGroupRuleReq {
    metapb.ScheduleGroupRule rule = 1 [(gogoproto.nullable) = false];
}

message AddScheduleGroupRuleRsp {

}

message GetScheduleGroupRuleReq {
    
}

message GetScheduleGroupRuleRsp {
    repeated metapb.ScheduleGroupRule rules = 1 [(gogoproto.nullable) = false];
}

// EventNotify event notify
message EventNotify {
    uint64                 seq                 = 1;
    uint32                 type                = 2;
    InitEventData          initEvent           = 3;
    ResourceEventData      resourceEvent       = 4;
    ContainerEventData     containerEvent      = 5;
    metapb.ResourceStats   resourceStatsEvent  = 6;
    metapb.ContainerStats  containerStatsEvent = 7;
}

// InitEventData init event data
message InitEventData {
    repeated bytes  resources  = 1;
    repeated uint64 leaders    = 2;
    repeated bytes  containers = 3;
}

// ResourceEventData resource created or updated
message ResourceEventData {
    bytes  data    = 1;
    uint64 leader  = 2;
    bool   removed = 3;
    bool   create  = 4;
}

// ContainerEventData container created or updated
message ContainerEventData {
    bytes data = 1;
}

// ChangePeer change peer
message ConfigChange {
    metapb.Replica           replica       = 1 [(gogoproto.nullable) = false];
    metapb.ConfigChangeType changeType = 2;
}

// TransferLeader transfer leader
message TransferLeader {
    metapb.Replica replica = 1 [(gogoproto.nullable) = false];
}

// ConfigChangeV2 change peer v2
message ConfigChangeV2 {
    // If changes is empty, it means that to exit joint state.
    repeated ConfigChange changes = 1 [(gogoproto.nullable) = false];
}

// Merge merge
message Merge {
    // target resource
    bytes target = 1;
}

// SplitResource split resource
message SplitResource {
    metapb.CheckPolicy policy = 1;
    repeated bytes     keys   = 2;
}

// PeerRoleType is the expected peer type of the placement rule
enum ReplicaRoleType {
    // Voter can either match a leader peer or follower peer
    Voter    = 0;
    // Leader matches a leader.
    Leader   = 1;
    // Follower matches a follower.
    Follower = 2;
    // Learner matches a learner.
    Learner  = 3;
}

// LabelConstraintOp defines how a LabelConstraint matches a container. It can be one of
// 'in', 'notIn', 'exists', or 'notExists'.
enum LabelConstraintOp {
    // In If label does not exist, `in` is always false.
    In        = 0;
    // NotIn restricts the container label value should not in the value list.
    NotIn     = 1;
    // Exists restricts the container should have the label.
    Exists    = 2;
    // NotExists restricts the container should not have the label.
    NotExists = 3;
}

// LabelConstraint is used to filter container when trying to place peer of a resource.
message LabelConstraint {
    string            key    = 1;
    LabelConstraintOp op     = 2;
    repeated string   values = 3;
}

// PlacementRule place rule
message PlacementRule {
    // ID unique ID within a group
    string       id       = 1 [(gogoproto.customname) = "ID"];
    // GroupID mark the source that add the rule
    string       groupID  = 2;
    // Index rule apply order in a group, rule with less ID is applied first when indexes are equal
    uint32       index    = 3;
    // Override when it is true, all rules with less indexes are disabled
    bool         override = 4;
    bytes        startKey = 5;
    bytes        endKey   = 6;
    // Role expected role of the peers
    ReplicaRoleType role     = 7;
    // Count expected count of the peers
    uint32       count    = 8;
    // LabelConstraints used to select containers to place peers
    repeated LabelConstraint labelConstraints = 9 [(gogoproto.nullable) = false];
    // LocationLabels used to make peers isolated physically
    repeated string          locationLabels   = 10;
    // IsolationLevelused to isolate replicas explicitly and forcibly
    string                   isolationLevel   = 11;
}
