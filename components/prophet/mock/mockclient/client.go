// Code generated by MockGen. DO NOT EDIT.
// Source: ../client.go

// Package mockclient is a generated GoMock package.
package mockclient

import (
	reflect "reflect"

	roaring64 "github.com/RoaringBitmap/roaring/roaring64"
	gomock "github.com/golang/mock/gomock"
	prophet "github.com/matrixorigin/matrixcube/components/prophet"
	metadata "github.com/matrixorigin/matrixcube/components/prophet/metadata"
	metapb "github.com/matrixorigin/matrixcube/components/prophet/pb/metapb"
	rpcpb "github.com/matrixorigin/matrixcube/components/prophet/pb/rpcpb"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddSchedulingRule mocks base method.
func (m *MockClient) AddSchedulingRule(group uint64, ruleName, groupByLabel string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSchedulingRule", group, ruleName, groupByLabel)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSchedulingRule indicates an expected call of AddSchedulingRule.
func (mr *MockClientMockRecorder) AddSchedulingRule(group, ruleName, groupByLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSchedulingRule", reflect.TypeOf((*MockClient)(nil).AddSchedulingRule), group, ruleName, groupByLabel)
}

// AllocID mocks base method.
func (m *MockClient) AllocID() (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllocID")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllocID indicates an expected call of AllocID.
func (mr *MockClientMockRecorder) AllocID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllocID", reflect.TypeOf((*MockClient)(nil).AllocID))
}

// AskBatchSplit mocks base method.
func (m *MockClient) AskBatchSplit(res metadata.Resource, count uint32) ([]rpcpb.SplitID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AskBatchSplit", res, count)
	ret0, _ := ret[0].([]rpcpb.SplitID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AskBatchSplit indicates an expected call of AskBatchSplit.
func (mr *MockClientMockRecorder) AskBatchSplit(res, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskBatchSplit", reflect.TypeOf((*MockClient)(nil).AskBatchSplit), res, count)
}

// AsyncAddResources mocks base method.
func (m *MockClient) AsyncAddResources(resources ...metadata.Resource) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range resources {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AsyncAddResources", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AsyncAddResources indicates an expected call of AsyncAddResources.
func (mr *MockClientMockRecorder) AsyncAddResources(resources ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncAddResources", reflect.TypeOf((*MockClient)(nil).AsyncAddResources), resources...)
}

// AsyncAddResourcesWithLeastPeers mocks base method.
func (m *MockClient) AsyncAddResourcesWithLeastPeers(resources []metadata.Resource, leastPeers []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsyncAddResourcesWithLeastPeers", resources, leastPeers)
	ret0, _ := ret[0].(error)
	return ret0
}

// AsyncAddResourcesWithLeastPeers indicates an expected call of AsyncAddResourcesWithLeastPeers.
func (mr *MockClientMockRecorder) AsyncAddResourcesWithLeastPeers(resources, leastPeers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncAddResourcesWithLeastPeers", reflect.TypeOf((*MockClient)(nil).AsyncAddResourcesWithLeastPeers), resources, leastPeers)
}

// AsyncRemoveResources mocks base method.
func (m *MockClient) AsyncRemoveResources(ids ...uint64) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AsyncRemoveResources", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AsyncRemoveResources indicates an expected call of AsyncRemoveResources.
func (mr *MockClientMockRecorder) AsyncRemoveResources(ids ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncRemoveResources", reflect.TypeOf((*MockClient)(nil).AsyncRemoveResources), ids...)
}

// CheckResourceState mocks base method.
func (m *MockClient) CheckResourceState(resources *roaring64.Bitmap) (rpcpb.CheckResourceStateRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckResourceState", resources)
	ret0, _ := ret[0].(rpcpb.CheckResourceStateRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckResourceState indicates an expected call of CheckResourceState.
func (mr *MockClientMockRecorder) CheckResourceState(resources interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckResourceState", reflect.TypeOf((*MockClient)(nil).CheckResourceState), resources)
}

// Close mocks base method.
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// ContainerHeartbeat mocks base method.
func (m *MockClient) ContainerHeartbeat(hb rpcpb.ContainerHeartbeatReq) (rpcpb.ContainerHeartbeatRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerHeartbeat", hb)
	ret0, _ := ret[0].(rpcpb.ContainerHeartbeatRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ContainerHeartbeat indicates an expected call of ContainerHeartbeat.
func (mr *MockClientMockRecorder) ContainerHeartbeat(hb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerHeartbeat", reflect.TypeOf((*MockClient)(nil).ContainerHeartbeat), hb)
}

// CreateDestroying mocks base method.
func (m *MockClient) CreateDestroying(id, index uint64, removeData bool, replicas []uint64) (metapb.ResourceState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDestroying", id, index, removeData, replicas)
	ret0, _ := ret[0].(metapb.ResourceState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDestroying indicates an expected call of CreateDestroying.
func (mr *MockClientMockRecorder) CreateDestroying(id, index, removeData, replicas interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDestroying", reflect.TypeOf((*MockClient)(nil).CreateDestroying), id, index, removeData, replicas)
}

// CreateJob mocks base method.
func (m *MockClient) CreateJob(arg0 metapb.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJob", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateJob indicates an expected call of CreateJob.
func (mr *MockClientMockRecorder) CreateJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJob", reflect.TypeOf((*MockClient)(nil).CreateJob), arg0)
}

// ExecuteJob mocks base method.
func (m *MockClient) ExecuteJob(arg0 metapb.Job, arg1 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteJob", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteJob indicates an expected call of ExecuteJob.
func (mr *MockClientMockRecorder) ExecuteJob(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteJob", reflect.TypeOf((*MockClient)(nil).ExecuteJob), arg0, arg1)
}

// GetAppliedRules mocks base method.
func (m *MockClient) GetAppliedRules(id uint64) ([]rpcpb.PlacementRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAppliedRules", id)
	ret0, _ := ret[0].([]rpcpb.PlacementRule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAppliedRules indicates an expected call of GetAppliedRules.
func (mr *MockClientMockRecorder) GetAppliedRules(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAppliedRules", reflect.TypeOf((*MockClient)(nil).GetAppliedRules), id)
}

// GetContainer mocks base method.
func (m *MockClient) GetContainer(containerID uint64) (metadata.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainer", containerID)
	ret0, _ := ret[0].(metadata.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainer indicates an expected call of GetContainer.
func (mr *MockClientMockRecorder) GetContainer(containerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainer", reflect.TypeOf((*MockClient)(nil).GetContainer), containerID)
}

// GetDestroying mocks base method.
func (m *MockClient) GetDestroying(id uint64) (*metapb.DestroyingStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDestroying", id)
	ret0, _ := ret[0].(*metapb.DestroyingStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDestroying indicates an expected call of GetDestroying.
func (mr *MockClientMockRecorder) GetDestroying(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDestroying", reflect.TypeOf((*MockClient)(nil).GetDestroying), id)
}

// GetResourceHeartbeatRspNotifier mocks base method.
func (m *MockClient) GetResourceHeartbeatRspNotifier() (chan rpcpb.ResourceHeartbeatRsp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceHeartbeatRspNotifier")
	ret0, _ := ret[0].(chan rpcpb.ResourceHeartbeatRsp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceHeartbeatRspNotifier indicates an expected call of GetResourceHeartbeatRspNotifier.
func (mr *MockClientMockRecorder) GetResourceHeartbeatRspNotifier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceHeartbeatRspNotifier", reflect.TypeOf((*MockClient)(nil).GetResourceHeartbeatRspNotifier))
}

// NewWatcher mocks base method.
func (m *MockClient) NewWatcher(flag uint32) (prophet.Watcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewWatcher", flag)
	ret0, _ := ret[0].(prophet.Watcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewWatcher indicates an expected call of NewWatcher.
func (mr *MockClientMockRecorder) NewWatcher(flag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewWatcher", reflect.TypeOf((*MockClient)(nil).NewWatcher), flag)
}

// PutContainer mocks base method.
func (m *MockClient) PutContainer(container metadata.Container) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutContainer", container)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutContainer indicates an expected call of PutContainer.
func (mr *MockClientMockRecorder) PutContainer(container interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutContainer", reflect.TypeOf((*MockClient)(nil).PutContainer), container)
}

// PutPlacementRule mocks base method.
func (m *MockClient) PutPlacementRule(rule rpcpb.PlacementRule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPlacementRule", rule)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutPlacementRule indicates an expected call of PutPlacementRule.
func (mr *MockClientMockRecorder) PutPlacementRule(rule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPlacementRule", reflect.TypeOf((*MockClient)(nil).PutPlacementRule), rule)
}

// RemoveJob mocks base method.
func (m *MockClient) RemoveJob(arg0 metapb.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveJob", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveJob indicates an expected call of RemoveJob.
func (mr *MockClientMockRecorder) RemoveJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveJob", reflect.TypeOf((*MockClient)(nil).RemoveJob), arg0)
}

// ReportDestroyed mocks base method.
func (m *MockClient) ReportDestroyed(id, replicaID uint64) (metapb.ResourceState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReportDestroyed", id, replicaID)
	ret0, _ := ret[0].(metapb.ResourceState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReportDestroyed indicates an expected call of ReportDestroyed.
func (mr *MockClientMockRecorder) ReportDestroyed(id, replicaID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportDestroyed", reflect.TypeOf((*MockClient)(nil).ReportDestroyed), id, replicaID)
}

// ResourceHeartbeat mocks base method.
func (m *MockClient) ResourceHeartbeat(meta metadata.Resource, hb rpcpb.ResourceHeartbeatReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceHeartbeat", meta, hb)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResourceHeartbeat indicates an expected call of ResourceHeartbeat.
func (mr *MockClientMockRecorder) ResourceHeartbeat(meta, hb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceHeartbeat", reflect.TypeOf((*MockClient)(nil).ResourceHeartbeat), meta, hb)
}
