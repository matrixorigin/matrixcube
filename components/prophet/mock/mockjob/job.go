// Code generated by MockGen. DO NOT EDIT.
// Source: ../config/config_job.go

// Package mockjob is a generated GoMock package.
package mockjob

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	config "github.com/matrixorigin/matrixcube/components/prophet/config"
	core "github.com/matrixorigin/matrixcube/components/prophet/core"
	metadata "github.com/matrixorigin/matrixcube/components/prophet/metadata"
	metapb "github.com/matrixorigin/matrixcube/components/prophet/pb/metapb"
	storage "github.com/matrixorigin/matrixcube/components/prophet/storage"
)

// MockResourcesAware is a mock of ResourcesAware interface.
type MockResourcesAware struct {
	ctrl     *gomock.Controller
	recorder *MockResourcesAwareMockRecorder
}

// MockResourcesAwareMockRecorder is the mock recorder for MockResourcesAware.
type MockResourcesAwareMockRecorder struct {
	mock *MockResourcesAware
}

// NewMockResourcesAware creates a new mock instance.
func NewMockResourcesAware(ctrl *gomock.Controller) *MockResourcesAware {
	mock := &MockResourcesAware{ctrl: ctrl}
	mock.recorder = &MockResourcesAwareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourcesAware) EXPECT() *MockResourcesAwareMockRecorder {
	return m.recorder
}

// ForeachResources mocks base method.
func (m *MockResourcesAware) ForeachResources(group uint64, fn func(metadata.Resource)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForeachResources", group, fn)
}

// ForeachResources indicates an expected call of ForeachResources.
func (mr *MockResourcesAwareMockRecorder) ForeachResources(group, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForeachResources", reflect.TypeOf((*MockResourcesAware)(nil).ForeachResources), group, fn)
}

// ForeachWaittingCreateResources mocks base method.
func (m *MockResourcesAware) ForeachWaittingCreateResources(do func(metadata.Resource)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ForeachWaittingCreateResources", do)
}

// ForeachWaittingCreateResources indicates an expected call of ForeachWaittingCreateResources.
func (mr *MockResourcesAwareMockRecorder) ForeachWaittingCreateResources(do interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForeachWaittingCreateResources", reflect.TypeOf((*MockResourcesAware)(nil).ForeachWaittingCreateResources), do)
}

// GetResource mocks base method.
func (m *MockResourcesAware) GetResource(resourceID uint64) *core.CachedResource {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource", resourceID)
	ret0, _ := ret[0].(*core.CachedResource)
	return ret0
}

// GetResource indicates an expected call of GetResource.
func (mr *MockResourcesAwareMockRecorder) GetResource(resourceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockResourcesAware)(nil).GetResource), resourceID)
}

// MockJobProcessor is a mock of JobProcessor interface.
type MockJobProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockJobProcessorMockRecorder
}

// MockJobProcessorMockRecorder is the mock recorder for MockJobProcessor.
type MockJobProcessorMockRecorder struct {
	mock *MockJobProcessor
}

// NewMockJobProcessor creates a new mock instance.
func NewMockJobProcessor(ctrl *gomock.Controller) *MockJobProcessor {
	mock := &MockJobProcessor{ctrl: ctrl}
	mock.recorder = &MockJobProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobProcessor) EXPECT() *MockJobProcessorMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockJobProcessor) Execute(arg0 []byte, arg1 storage.JobStorage, arg2 config.ResourcesAware) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockJobProcessorMockRecorder) Execute(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockJobProcessor)(nil).Execute), arg0, arg1, arg2)
}

// Remove mocks base method.
func (m *MockJobProcessor) Remove(arg0 metapb.Job, arg1 storage.JobStorage, arg2 config.ResourcesAware) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Remove", arg0, arg1, arg2)
}

// Remove indicates an expected call of Remove.
func (mr *MockJobProcessorMockRecorder) Remove(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockJobProcessor)(nil).Remove), arg0, arg1, arg2)
}

// Start mocks base method.
func (m *MockJobProcessor) Start(arg0 metapb.Job, arg1 storage.JobStorage, arg2 config.ResourcesAware) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", arg0, arg1, arg2)
}

// Start indicates an expected call of Start.
func (mr *MockJobProcessorMockRecorder) Start(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockJobProcessor)(nil).Start), arg0, arg1, arg2)
}

// Stop mocks base method.
func (m *MockJobProcessor) Stop(arg0 metapb.Job, arg1 storage.JobStorage, arg2 config.ResourcesAware) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop", arg0, arg1, arg2)
}

// Stop indicates an expected call of Stop.
func (mr *MockJobProcessorMockRecorder) Stop(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockJobProcessor)(nil).Stop), arg0, arg1, arg2)
}
