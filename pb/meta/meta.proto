syntax = "proto3";
package meta;

import "github.com/matrixorigin/matrixcube/components/prophet/pb/metapb/metapb.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "go.etcd.io/etcd/raft/v3/raftpb/raft.proto";


option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_enum_prefix_all) = true;

// RaftMessageBatch is a group of messages sent to the same store.
message RaftMessageBatch {
    repeated RaftMessage messages = 1 [(gogoproto.nullable) = false];
}

// RaftMessage the message wrapped raft msg with shard info
message RaftMessage  {
    uint64               shardID      = 1;
    uint64               group        = 2;
    metapb.Replica       from         = 3 [(gogoproto.nullable) = false];
    metapb.Replica       to           = 4 [(gogoproto.nullable) = false];
    raftpb.Message       message      = 5 [(gogoproto.nullable) = false];
    metapb.ResourceEpoch shardEpoch   = 6 [(gogoproto.nullable) = false];
    bool                 isTombstone  = 7;
    bytes                start        = 8;
    bytes                end          = 9;
    bool                 disableSplit = 10;
    string               unique       = 11;
    repeated string      ruleGroups   = 12;
}

// SnapshotMessageHeader snapshot message header
message SnapshotMessageHeader {
    Shard            shard = 1 [(gogoproto.nullable) = false];
    metapb.Replica   from  = 2 [(gogoproto.nullable) = false];
    metapb.Replica   to    = 3 [(gogoproto.nullable) = false];
    uint64           term  = 4;
    uint64           index = 5;
}

// SnapshotMessage snapshot message
message SnapshotMessage {
    SnapshotMessageHeader header    = 1 [(gogoproto.nullable) = false];
    bytes                 data      = 2;
    bool                  first     = 3;
    bool                  last      = 4;
    uint64                fileSize  = 5;
    uint64                checkSum  = 6;
}

// StoreIdent store ident
message StoreIdent {
    uint64 clusterID = 1;
    uint64 storeID   = 2;
}

// Cluster the cluster info
message Cluster {
    uint64 id          = 1 [(gogoproto.customname) = "ID"];
    uint32 maxReplicas = 2;
}

// Shard a shard [start,end) of the data
message Shard {
    uint64                   id              = 1 [(gogoproto.customname) = "ID"];
    bytes                    start           = 2;
    bytes                    end             = 3;
    metapb.ResourceEpoch     epoch           = 4 [(gogoproto.nullable) = false];
    metapb.ResourceState     state           = 5;
    repeated metapb.Replica  replicas        = 6 [(gogoproto.nullable) = false];
    bool                     disableSplit    = 7;
    uint64                   group           = 8;
    string                   unique          = 10;
    repeated string          ruleGroups      = 11;
    bytes                    data            = 12;
}

// ReplicaState the state of the shard peer
enum ReplicaState {
    Normal    = 0;
    Applying  = 1;
    Tombstone = 2;
}

// LogIndex is used to indicate a position in the log. 
message LogIndex {
  uint64 index = 1;
  uint64 term = 2;
}

// ShardMetadata is the metadata of the shard consistent with the current table
// shard data
message ShardMetadata {
  uint64 shardID  = 1;
	uint64 logIndex = 2;
  uint64 logTerm  = 3;
	ShardLocalState metadata  = 4 [(gogoproto.nullable) = false];
}

// ShardLocalState shard local state
message ShardLocalState {
    Shard     shard = 1 [(gogoproto.nullable) = false];
    ReplicaState state = 2;
}

// Store the host store metadata
message Store {
    uint64                id                  = 1 [(gogoproto.customname) = "ID"];
    string                raftAddr            = 2;
    string                clientAddr          = 3;
    repeated metapb.Pair  labels              = 4 [(gogoproto.nullable) = false];
    metapb.ContainerState state               = 5;
    int64                 startTime           = 6;
    int64                 lastHeartbeatTime   = 7;
    string                version             = 8;
    string                gitHash             = 9;
    string                deployPath          = 10;
    bool                  physicallyDestroyed = 11;
}

// ShardsPool shards pool
message ShardsPool {
    map<uint64, ShardPool> pools = 1;
}

// ShardPool shard pool
message ShardPool {
    uint64          capacity                = 1;
    bytes           rangePrefix             = 2;
    repeated AllocatedShard allocatedShards = 3;
    uint64          seq                     = 4;
    uint64          allocatedOffset         = 5;
}

// AllocatedShard allocated shard info
message AllocatedShard {
    uint64 shardID     = 1;
    uint64 allocatedAt = 2;
    bytes  purpose     = 3;
}

// ShardsPoolCmdType shards pool cmd
enum ShardsPoolCmdType {
    CreateShard = 0;
    AllocShard  = 1;
}

// ShardsPoolCmd shards pool cmd
message ShardsPoolCmd {
    ShardsPoolCmdType   type   = 1;
    ShardsPoolCreateCmd create = 2;
    ShardsPoolAllocCmd  alloc  = 3;
}

// ShardsPoolCreateCmd shards pool create cmd
message ShardsPoolCreateCmd {
}

// ShardsPoolAllocCmd shards pool create cmd
message ShardsPoolAllocCmd {
    uint64 group   = 1;
    bytes  purpose = 2;
}

// SnapshotInfo contains additional information associated with a snapshot.
message SnapshotInfo {
  uint64 extra = 1;
}
