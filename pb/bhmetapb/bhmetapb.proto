syntax = "proto3";
package bhmetapb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/matrixorigin/matrixcube/components/prophet/pb/metapb/metapb.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_enum_prefix_all) = true;

// StoreIdent store ident
message StoreIdent {
    uint64 clusterID = 1;
    uint64 storeID   = 2;
}

// Cluster the cluster info
message Cluster {
    uint64 id          = 1 [(gogoproto.customname) = "ID"];
    uint32 maxReplicas = 2;
}

// Shard a shard [start,end) of the data
message Shard {
    uint64                id              = 1 [(gogoproto.customname) = "ID"];
    bytes                 start           = 2;
    bytes                 end             = 3;
    metapb.ResourceEpoch  epoch           = 4 [(gogoproto.nullable) = false];
    metapb.ResourceState  state           = 5;
    repeated metapb.Peer  peers           = 6 [(gogoproto.nullable) = false];
    bool                  disableSplit    = 7;
    uint64                group           = 8;
    string                unique          = 10;
    repeated string       ruleGroups      = 11;
    bytes                 data            = 12;
}

// Store the host store metadata
message Store {
    uint64                id                  = 1 [(gogoproto.customname) = "ID"];
    string                raftAddr            = 2;
    string                clientAddr          = 3;
    repeated metapb.Pair  labels              = 4 [(gogoproto.nullable) = false];
    metapb.ContainerState state               = 5;
    int64                 startTime           = 6;
    int64                 lastHeartbeatTime   = 7;
    string                version             = 8;
    string                gitHash             = 9;
    string                deployPath          = 10;
    bool                  physicallyDestroyed = 11;
}

// ShardsPool shards pool
message ShardsPool {
    map<uint64, ShardPool> pools = 1;
}

// ShardPool shard pool
message ShardPool {
    uint64          capacity                = 1;
    bytes           rangePrefix             = 2;
    repeated AllocatedShard allocatedShards = 3;
    uint64          seq                     = 4;
    uint64          allocatedOffset         = 5;
}

// AllocatedShard allocated shard info
message AllocatedShard {
    uint64 shardID     = 1;
    uint64 allocatedAt = 2;
    bytes  purpose     = 3;
}

// ShardsPoolCmdType shards pool cmd
enum ShardsPoolCmdType {
    CreateShard = 0;
    AllocShard  = 1;
}

// ShardsPoolCmd shards pool cmd
message ShardsPoolCmd {
    ShardsPoolCmdType   type   = 1;
    ShardsPoolCreateCmd create = 2;
    ShardsPoolAllocCmd  alloc  = 3;
}

// ShardsPoolCreateCmd shards pool create cmd
message ShardsPoolCreateCmd {
}

// ShardsPoolAllocCmd shards pool create cmd
message ShardsPoolAllocCmd {
    uint64 group   = 1;
    bytes  purpose = 2;
}