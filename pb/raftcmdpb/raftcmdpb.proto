syntax = "proto3";
package raftcmdpb;

import "github.com/matrixorigin/matrixcube/pb/bhmetapb/bhmetapb.proto";
import "github.com/matrixorigin/matrixcube/pb/errorpb/errorpb.proto";
import "github.com/matrixorigin/matrixcube/components/prophet/pb/metapb/metapb.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_enum_prefix_all) = true;

enum CMDType {
    Invalid   = 0;
    RaftError = 1;
    Snap      = 2;
    Write     = 3;
    Read      = 4;
}

// AdminCmdType admin cmd type
enum AdminCmdType {
    InvalidAdmin   = 0;
    ChangePeer     = 1;
    CompactLog     = 2;
    TransferLeader = 3;
    ComputeHash    = 4;
    VerifyHash     = 5;
    BatchSplit     = 6;
    ChangePeerV2   = 7;
}

// RaftRequestHeader raft request header, it contains the shard's metadata
message RaftRequestHeader {
    bytes                id               = 1 [(gogoproto.customname) = "ID"];
    uint64               shardID          = 2;
    metapb.Peer          peer             = 3 [(gogoproto.nullable) = false]; 
    metapb.ResourceEpoch epoch            = 5 [(gogoproto.nullable) = false];
    uint64               term             = 6;
    bool                 ignoreEpochCheck = 7;
}

message RaftResponseHeader {
    bytes         id          = 1 [(gogoproto.customname) = "ID"];
    errorpb.Error error       = 2 [(gogoproto.nullable) = false];
    uint64        currentTerm = 3;
}

// RaftCMDRequest we can't include both normal requests and administrator request 
// at same time. 
message RaftCMDRequest {
    RaftRequestHeader header       = 1;
    repeated Request  requests     = 2 [(gogoproto.nullable) = true];
    AdminRequest      adminRequest = 3 [(gogoproto.nullable) = true];
}

message RaftCMDResponse {
    RaftResponseHeader header        = 1 [(gogoproto.nullable) = true];
    repeated Response  responses     = 2 [(gogoproto.nullable) = true];
    AdminResponse      adminResponse = 3 [(gogoproto.nullable) = true];
}

// AdminRequest admin request
message AdminRequest {
    AdminCmdType          cmdType        = 1;
    ChangePeerRequest     changePeer     = 2;
    CompactLogRequest     compactLog     = 3;
    TransferLeaderRequest transferLeader = 4;
    VerifyHashRequest     verifyHash     = 5;
    BatchSplitRequest     splits         = 6;
    ChangePeerV2Request   changePeerV2   = 7;
}

// AdminResponse admin response
message AdminResponse {
    AdminCmdType           cmdType        = 1;
    ChangePeerResponse     changePeer     = 2;
    CompactLogResponse     compactLog     = 3;
    TransferLeaderResponse transferLeader = 4;
    VerifyHashResponse     verifyHash     = 5;
    BatchSplitResponse     splits         = 9;
    ChangePeerV2Response   changePeerV2   = 10;
}

// Request request
message Request {
    bytes   id               = 1 [(gogoproto.customname) = "ID"];
    uint64  group            = 2;
    CMDType type             = 3;
    uint64  custemType       = 4;
    bytes   key              = 5;
    bytes   cmd              = 6;
    int64   sid              = 7 [(gogoproto.customname) = "SID"];
    int64   pid              = 8 [(gogoproto.customname) = "PID"];
    int64   stopAt           = 9;
    uint64  toShard          = 10;
    bool    allowFollower    = 11;
    bool    lastBroadcast    = 12;
    bool    ignoreEpochCheck = 13;
}

// Response response
message Response {
    bytes         id                = 1 [(gogoproto.customname) = "ID"];
    CMDType       type              = 2;
    bytes         value             = 3;
    Request       originRequest     = 4 [(gogoproto.nullable) = true];
    int64         sid               = 5 [(gogoproto.customname) = "SID"];
    int64         pid               = 6 [(gogoproto.customname) = "PID"];
    errorpb.Error error             = 7 [(gogoproto.nullable) = false];
    bool          continueBroadcast = 8;
    bool          stale             = 9;
}


message ChangePeerRequest {
    // This can be only called in internal RaftStore now.
    metapb.ChangePeerType changeType = 1;
    metapb.Peer peer = 2 [(gogoproto.nullable) = false];
}

// ChangePeerResponse change peer response
message ChangePeerResponse {
    bhmetapb.Shard shard = 1 [(gogoproto.nullable) = false];
}

// CompactLogRequest compact raft log
message CompactLogRequest {
    uint64 compactIndex = 1;
    uint64 compactTerm  = 2;
}

// CompactLogResponse compact raft log
message CompactLogResponse {}

// TransferLeaderRequest transfer leader
message TransferLeaderRequest {
    metapb.Peer peer = 1 [(gogoproto.nullable) = false];
}

message TransferLeaderResponse {}

message VerifyHashRequest {
    uint64 index = 1;
    bytes hash = 2;
    bytes context = 3;
}

message VerifyHashResponse {}

message SplitRequest {
    // This can be only called in internal RaftStore now.
    // The split_key must be in the been splitting region.
    bytes splitKey = 1;
    // We split the region into two, first uses the origin 
    // parent region id, and the second uses the new_region_id.
    // We must guarantee that the new_region_id is global unique.
    uint64 newShardID = 2;
    // The peer ids for the new split region.
    repeated uint64 newPeerIDs = 3;
}

message BatchSplitRequest {
    repeated SplitRequest requests = 1 [(gogoproto.nullable) = false];
    // If true, the last shard derive the origin shard_id, 
    // other shards use new ids.
    bool rightDerive = 2 ;
}

message BatchSplitResponse {
    repeated bhmetapb.Shard shards = 1 [(gogoproto.nullable) = false];
}



message ChangePeerV2Request {
    repeated ChangePeerRequest changes = 1 [(gogoproto.nullable) = false];
}

message ChangePeerV2Response {
    bhmetapb.Shard shard = 1;
}