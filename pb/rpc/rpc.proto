syntax = "proto3";
package rpc;

import "github.com/matrixorigin/matrixcube/pb/meta/meta.proto";
import "github.com/matrixorigin/matrixcube/pb/errorpb/errorpb.proto";
import "github.com/matrixorigin/matrixcube/components/prophet/pb/metapb/metapb.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_enum_prefix_all) = true;

enum CmdType {
    Write  = 0;
    Read   = 1;
    Admin  = 2;
}

// AdminCmdType admin cmd type
enum AdminCmdType {
    ConfigChange   = 0;
    CompactLog     = 1;
    TransferLeader = 2;
    ComputeHash    = 3;
    VerifyHash     = 4;
    BatchSplit     = 5;
    UpdateMetadata = 6;
}

// RequestHeader raft request header, it contains the shard's metadata
message RequestBatchHeader {
    bytes                id               = 1 [(gogoproto.customname) = "ID"];
    uint64               shardID          = 2;
    metapb.Replica       replica          = 3 [(gogoproto.nullable) = false]; 
}

message ResponseBatchHeader {
    bytes         id          = 1 [(gogoproto.customname) = "ID"];
    errorpb.Error error       = 2 [(gogoproto.nullable) = false];
}

// RequestBatch we can't include both normal requests and administrator request 
// at same time. 
message RequestBatch {
    RequestBatchHeader header       = 1 [(gogoproto.nullable) = false];
    repeated Request   requests     = 2 [(gogoproto.nullable) = false];
}

// ResponseBatch response batch
message ResponseBatch {
    ResponseBatchHeader header        = 1 [(gogoproto.nullable) = false];
    repeated Response   responses     = 2 [(gogoproto.nullable) = false];
}

// Request request
message Request {
    bytes   id                 = 1 [(gogoproto.customname) = "ID"];
    uint64  group              = 2;
    CmdType type               = 3;
    uint64  customType         = 4;
    bytes   key                = 5;
    bytes   cmd                = 6;
    int64   pid                = 7 [(gogoproto.customname) = "PID"];
    int64   stopAt             = 8;
    uint64  toShard            = 9;
    bool    ignoreEpochCheck   = 10;
    metapb.ResourceEpoch epoch = 11 [(gogoproto.nullable) = false];
}

// Response response
message Response {
    bytes         id                = 1 [(gogoproto.customname) = "ID"];
    CmdType       type              = 2;
    uint64        customType        = 3;
    bytes         value             = 4;
    int64         pid               = 5 [(gogoproto.customname) = "PID"];
    errorpb.Error error             = 6 [(gogoproto.nullable) = false];
}

message ConfigChangeRequest {
    // This can be only called in internal RaftStore now.
    metapb.ConfigChangeType changeType = 1;
    metapb.Replica replica = 2 [(gogoproto.nullable) = false];
}

// ConfigChangeResponse change peer response
message ConfigChangeResponse {
    meta.Shard shard = 1 [(gogoproto.nullable) = false];
}

// CompactLogRequest compact raft log
message CompactLogRequest {
    uint64 compactIndex = 1;
}

// CompactLogResponse compact raft log
message CompactLogResponse {}

// TransferLeaderRequest transfer leader
message TransferLeaderRequest {
    metapb.Replica replica = 1 [(gogoproto.nullable) = false];
}

message TransferLeaderResponse {}

message VerifyHashRequest {
    uint64 index = 1;
    bytes hash = 2;
    bytes context = 3;
}

message VerifyHashResponse {}

// BatchSplitRequest batch split requests.
message BatchSplitRequest {
    // The requests for splitting a shard into multiple shards.
    // We split Shard A [0, 10) into B [0, 5) and C [5, 10), the len(requests) = 2, and
    // Shard A will not used after split completed.
    repeated SplitRequest requests = 1 [(gogoproto.nullable) = false];
             bytes        context  = 2;                 
}

message SplitRequest {
    // The start of the sub shard range
    bytes start = 1;
    // The end of the sub shard range
    bytes end   = 2;
    // The new shard id
    uint64 newShardID = 3;
    // The new replcias of the new shard
    repeated metapb.Replica newReplicas = 4 [(gogoproto.nullable) = false];
}

message BatchSplitResponse {
    repeated meta.Shard shards = 1 [(gogoproto.nullable) = false];
}

message UpdateMetadataRequest {
    meta.ShardLocalState metadata = 1 [(gogoproto.nullable) = false];
}

message UpdateMetadataResponse {
    
}