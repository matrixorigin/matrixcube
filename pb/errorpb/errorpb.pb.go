// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: errorpb.proto

package errorpb

import (
	fmt "fmt"
	io "io"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	metapb "github.com/matrixorigin/matrixcube/pb/metapb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// NotLeader the current shard peer is not leader
type NotLeader struct {
	ShardID              uint64         `protobuf:"varint,1,opt,name=shardID,proto3" json:"shardID,omitempty"`
	Leader               metapb.Replica `protobuf:"bytes,2,opt,name=leader,proto3" json:"leader"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *NotLeader) Reset()         { *m = NotLeader{} }
func (m *NotLeader) String() string { return proto.CompactTextString(m) }
func (*NotLeader) ProtoMessage()    {}
func (*NotLeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_390aa86757fd1154, []int{0}
}
func (m *NotLeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotLeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotLeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotLeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotLeader.Merge(m, src)
}
func (m *NotLeader) XXX_Size() int {
	return m.Size()
}
func (m *NotLeader) XXX_DiscardUnknown() {
	xxx_messageInfo_NotLeader.DiscardUnknown(m)
}

var xxx_messageInfo_NotLeader proto.InternalMessageInfo

func (m *NotLeader) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *NotLeader) GetLeader() metapb.Replica {
	if m != nil {
		return m.Leader
	}
	return metapb.Replica{}
}

// StoreNotMatch current store is not match
type StoreMismatch struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StoreMismatch) Reset()         { *m = StoreMismatch{} }
func (m *StoreMismatch) String() string { return proto.CompactTextString(m) }
func (*StoreMismatch) ProtoMessage()    {}
func (*StoreMismatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_390aa86757fd1154, []int{1}
}
func (m *StoreMismatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StoreMismatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StoreMismatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StoreMismatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StoreMismatch.Merge(m, src)
}
func (m *StoreMismatch) XXX_Size() int {
	return m.Size()
}
func (m *StoreMismatch) XXX_DiscardUnknown() {
	xxx_messageInfo_StoreMismatch.DiscardUnknown(m)
}

var xxx_messageInfo_StoreMismatch proto.InternalMessageInfo

// ShardUnavailable the shard is unavailable, maybe destroyed
type ShardUnavailable struct {
	ShardID              uint64   `protobuf:"varint,1,opt,name=shardID,proto3" json:"shardID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShardUnavailable) Reset()         { *m = ShardUnavailable{} }
func (m *ShardUnavailable) String() string { return proto.CompactTextString(m) }
func (*ShardUnavailable) ProtoMessage()    {}
func (*ShardUnavailable) Descriptor() ([]byte, []int) {
	return fileDescriptor_390aa86757fd1154, []int{2}
}
func (m *ShardUnavailable) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardUnavailable) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardUnavailable.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardUnavailable) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardUnavailable.Merge(m, src)
}
func (m *ShardUnavailable) XXX_Size() int {
	return m.Size()
}
func (m *ShardUnavailable) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardUnavailable.DiscardUnknown(m)
}

var xxx_messageInfo_ShardUnavailable proto.InternalMessageInfo

func (m *ShardUnavailable) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

// ShardNotFound the shard replica is not found on the store
type ShardNotFound struct {
	ShardID              uint64   `protobuf:"varint,1,opt,name=shardID,proto3" json:"shardID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShardNotFound) Reset()         { *m = ShardNotFound{} }
func (m *ShardNotFound) String() string { return proto.CompactTextString(m) }
func (*ShardNotFound) ProtoMessage()    {}
func (*ShardNotFound) Descriptor() ([]byte, []int) {
	return fileDescriptor_390aa86757fd1154, []int{3}
}
func (m *ShardNotFound) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardNotFound) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardNotFound.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardNotFound) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardNotFound.Merge(m, src)
}
func (m *ShardNotFound) XXX_Size() int {
	return m.Size()
}
func (m *ShardNotFound) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardNotFound.DiscardUnknown(m)
}

var xxx_messageInfo_ShardNotFound proto.InternalMessageInfo

func (m *ShardNotFound) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

// KeyNotInShard the key is not found on the store
type KeyNotInShard struct {
	Key                  []byte   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	ShardID              uint64   `protobuf:"varint,2,opt,name=shardID,proto3" json:"shardID,omitempty"`
	Start                []byte   `protobuf:"bytes,3,opt,name=start,proto3" json:"start,omitempty"`
	End                  []byte   `protobuf:"bytes,4,opt,name=end,proto3" json:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyNotInShard) Reset()         { *m = KeyNotInShard{} }
func (m *KeyNotInShard) String() string { return proto.CompactTextString(m) }
func (*KeyNotInShard) ProtoMessage()    {}
func (*KeyNotInShard) Descriptor() ([]byte, []int) {
	return fileDescriptor_390aa86757fd1154, []int{4}
}
func (m *KeyNotInShard) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyNotInShard) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyNotInShard.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyNotInShard) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyNotInShard.Merge(m, src)
}
func (m *KeyNotInShard) XXX_Size() int {
	return m.Size()
}
func (m *KeyNotInShard) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyNotInShard.DiscardUnknown(m)
}

var xxx_messageInfo_KeyNotInShard proto.InternalMessageInfo

func (m *KeyNotInShard) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *KeyNotInShard) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *KeyNotInShard) GetStart() []byte {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *KeyNotInShard) GetEnd() []byte {
	if m != nil {
		return m.End
	}
	return nil
}

// StaleEpoch the current shard peer is stale
type StaleEpoch struct {
	NewShards            []metapb.Shard `protobuf:"bytes,1,rep,name=newShards,proto3" json:"newShards"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *StaleEpoch) Reset()         { *m = StaleEpoch{} }
func (m *StaleEpoch) String() string { return proto.CompactTextString(m) }
func (*StaleEpoch) ProtoMessage()    {}
func (*StaleEpoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_390aa86757fd1154, []int{5}
}
func (m *StaleEpoch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StaleEpoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StaleEpoch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StaleEpoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StaleEpoch.Merge(m, src)
}
func (m *StaleEpoch) XXX_Size() int {
	return m.Size()
}
func (m *StaleEpoch) XXX_DiscardUnknown() {
	xxx_messageInfo_StaleEpoch.DiscardUnknown(m)
}

var xxx_messageInfo_StaleEpoch proto.InternalMessageInfo

func (m *StaleEpoch) GetNewShards() []metapb.Shard {
	if m != nil {
		return m.NewShards
	}
	return nil
}

// ServerIsBusy the server is busy
type ServerIsBusy struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ServerIsBusy) Reset()         { *m = ServerIsBusy{} }
func (m *ServerIsBusy) String() string { return proto.CompactTextString(m) }
func (*ServerIsBusy) ProtoMessage()    {}
func (*ServerIsBusy) Descriptor() ([]byte, []int) {
	return fileDescriptor_390aa86757fd1154, []int{6}
}
func (m *ServerIsBusy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServerIsBusy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServerIsBusy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServerIsBusy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServerIsBusy.Merge(m, src)
}
func (m *ServerIsBusy) XXX_Size() int {
	return m.Size()
}
func (m *ServerIsBusy) XXX_DiscardUnknown() {
	xxx_messageInfo_ServerIsBusy.DiscardUnknown(m)
}

var xxx_messageInfo_ServerIsBusy proto.InternalMessageInfo

// StaleCommand the command is stale, need to retry
type StaleCommand struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StaleCommand) Reset()         { *m = StaleCommand{} }
func (m *StaleCommand) String() string { return proto.CompactTextString(m) }
func (*StaleCommand) ProtoMessage()    {}
func (*StaleCommand) Descriptor() ([]byte, []int) {
	return fileDescriptor_390aa86757fd1154, []int{7}
}
func (m *StaleCommand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StaleCommand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StaleCommand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StaleCommand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StaleCommand.Merge(m, src)
}
func (m *StaleCommand) XXX_Size() int {
	return m.Size()
}
func (m *StaleCommand) XXX_DiscardUnknown() {
	xxx_messageInfo_StaleCommand.DiscardUnknown(m)
}

var xxx_messageInfo_StaleCommand proto.InternalMessageInfo

// RaftEntryTooLarge raft entry is too large
type RaftEntryTooLarge struct {
	ShardID              uint64   `protobuf:"varint,1,opt,name=shardID,proto3" json:"shardID,omitempty"`
	EntrySize            uint64   `protobuf:"varint,2,opt,name=entrySize,proto3" json:"entrySize,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RaftEntryTooLarge) Reset()         { *m = RaftEntryTooLarge{} }
func (m *RaftEntryTooLarge) String() string { return proto.CompactTextString(m) }
func (*RaftEntryTooLarge) ProtoMessage()    {}
func (*RaftEntryTooLarge) Descriptor() ([]byte, []int) {
	return fileDescriptor_390aa86757fd1154, []int{8}
}
func (m *RaftEntryTooLarge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftEntryTooLarge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RaftEntryTooLarge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RaftEntryTooLarge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftEntryTooLarge.Merge(m, src)
}
func (m *RaftEntryTooLarge) XXX_Size() int {
	return m.Size()
}
func (m *RaftEntryTooLarge) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftEntryTooLarge.DiscardUnknown(m)
}

var xxx_messageInfo_RaftEntryTooLarge proto.InternalMessageInfo

func (m *RaftEntryTooLarge) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *RaftEntryTooLarge) GetEntrySize() uint64 {
	if m != nil {
		return m.EntrySize
	}
	return 0
}

// LeaseMissing lease is missing
type LeaseMissing struct {
	ShardID              uint64   `protobuf:"varint,1,opt,name=shardID,proto3" json:"shardID,omitempty"`
	ReplicaID            uint64   `protobuf:"varint,2,opt,name=replicaID,proto3" json:"replicaID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LeaseMissing) Reset()         { *m = LeaseMissing{} }
func (m *LeaseMissing) String() string { return proto.CompactTextString(m) }
func (*LeaseMissing) ProtoMessage()    {}
func (*LeaseMissing) Descriptor() ([]byte, []int) {
	return fileDescriptor_390aa86757fd1154, []int{9}
}
func (m *LeaseMissing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaseMissing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeaseMissing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeaseMissing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaseMissing.Merge(m, src)
}
func (m *LeaseMissing) XXX_Size() int {
	return m.Size()
}
func (m *LeaseMissing) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaseMissing.DiscardUnknown(m)
}

var xxx_messageInfo_LeaseMissing proto.InternalMessageInfo

func (m *LeaseMissing) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *LeaseMissing) GetReplicaID() uint64 {
	if m != nil {
		return m.ReplicaID
	}
	return 0
}

// LeaseMismatch request lease and replica held lease not match
type LeaseMismatch struct {
	RequestLease         *metapb.EpochLease `protobuf:"bytes,1,opt,name=requestLease,proto3" json:"requestLease,omitempty"`
	ReplicaHeldLease     *metapb.EpochLease `protobuf:"bytes,2,opt,name=replicaHeldLease,proto3" json:"replicaHeldLease,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *LeaseMismatch) Reset()         { *m = LeaseMismatch{} }
func (m *LeaseMismatch) String() string { return proto.CompactTextString(m) }
func (*LeaseMismatch) ProtoMessage()    {}
func (*LeaseMismatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_390aa86757fd1154, []int{10}
}
func (m *LeaseMismatch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaseMismatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeaseMismatch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeaseMismatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaseMismatch.Merge(m, src)
}
func (m *LeaseMismatch) XXX_Size() int {
	return m.Size()
}
func (m *LeaseMismatch) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaseMismatch.DiscardUnknown(m)
}

var xxx_messageInfo_LeaseMismatch proto.InternalMessageInfo

func (m *LeaseMismatch) GetRequestLease() *metapb.EpochLease {
	if m != nil {
		return m.RequestLease
	}
	return nil
}

func (m *LeaseMismatch) GetReplicaHeldLease() *metapb.EpochLease {
	if m != nil {
		return m.ReplicaHeldLease
	}
	return nil
}

// LeaseReadNotReady lease held replica not ready, because some raft log need to applied.
type LeaseReadNotReady struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LeaseReadNotReady) Reset()         { *m = LeaseReadNotReady{} }
func (m *LeaseReadNotReady) String() string { return proto.CompactTextString(m) }
func (*LeaseReadNotReady) ProtoMessage()    {}
func (*LeaseReadNotReady) Descriptor() ([]byte, []int) {
	return fileDescriptor_390aa86757fd1154, []int{11}
}
func (m *LeaseReadNotReady) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LeaseReadNotReady) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LeaseReadNotReady.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LeaseReadNotReady) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LeaseReadNotReady.Merge(m, src)
}
func (m *LeaseReadNotReady) XXX_Size() int {
	return m.Size()
}
func (m *LeaseReadNotReady) XXX_DiscardUnknown() {
	xxx_messageInfo_LeaseReadNotReady.DiscardUnknown(m)
}

var xxx_messageInfo_LeaseReadNotReady proto.InternalMessageInfo

// Error is a raft error
type Error struct {
	Message              string             `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	NotLeader            *NotLeader         `protobuf:"bytes,2,opt,name=notLeader,proto3" json:"notLeader,omitempty"`
	ShardNotFound        *ShardNotFound     `protobuf:"bytes,3,opt,name=shardNotFound,proto3" json:"shardNotFound,omitempty"`
	KeyNotInShard        *KeyNotInShard     `protobuf:"bytes,4,opt,name=KeyNotInShard,proto3" json:"KeyNotInShard,omitempty"`
	StaleEpoch           *StaleEpoch        `protobuf:"bytes,5,opt,name=staleEpoch,proto3" json:"staleEpoch,omitempty"`
	ServerIsBusy         *ServerIsBusy      `protobuf:"bytes,6,opt,name=serverIsBusy,proto3" json:"serverIsBusy,omitempty"`
	StaleCommand         *StaleCommand      `protobuf:"bytes,7,opt,name=staleCommand,proto3" json:"staleCommand,omitempty"`
	StoreMismatch        *StoreMismatch     `protobuf:"bytes,8,opt,name=storeMismatch,proto3" json:"storeMismatch,omitempty"`
	RaftEntryTooLarge    *RaftEntryTooLarge `protobuf:"bytes,9,opt,name=raftEntryTooLarge,proto3" json:"raftEntryTooLarge,omitempty"`
	ShardUnavailable     *ShardUnavailable  `protobuf:"bytes,10,opt,name=shardUnavailable,proto3" json:"shardUnavailable,omitempty"`
	LeaseMissing         *LeaseMissing      `protobuf:"bytes,11,opt,name=leaseMissing,proto3" json:"leaseMissing,omitempty"`
	LeaseMismatch        *LeaseMismatch     `protobuf:"bytes,12,opt,name=leaseMismatch,proto3" json:"leaseMismatch,omitempty"`
	LeaseReadNotReady    *LeaseReadNotReady `protobuf:"bytes,13,opt,name=leaseReadNotReady,proto3" json:"leaseReadNotReady,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_390aa86757fd1154, []int{12}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return m.Size()
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Error) GetNotLeader() *NotLeader {
	if m != nil {
		return m.NotLeader
	}
	return nil
}

func (m *Error) GetShardNotFound() *ShardNotFound {
	if m != nil {
		return m.ShardNotFound
	}
	return nil
}

func (m *Error) GetKeyNotInShard() *KeyNotInShard {
	if m != nil {
		return m.KeyNotInShard
	}
	return nil
}

func (m *Error) GetStaleEpoch() *StaleEpoch {
	if m != nil {
		return m.StaleEpoch
	}
	return nil
}

func (m *Error) GetServerIsBusy() *ServerIsBusy {
	if m != nil {
		return m.ServerIsBusy
	}
	return nil
}

func (m *Error) GetStaleCommand() *StaleCommand {
	if m != nil {
		return m.StaleCommand
	}
	return nil
}

func (m *Error) GetStoreMismatch() *StoreMismatch {
	if m != nil {
		return m.StoreMismatch
	}
	return nil
}

func (m *Error) GetRaftEntryTooLarge() *RaftEntryTooLarge {
	if m != nil {
		return m.RaftEntryTooLarge
	}
	return nil
}

func (m *Error) GetShardUnavailable() *ShardUnavailable {
	if m != nil {
		return m.ShardUnavailable
	}
	return nil
}

func (m *Error) GetLeaseMissing() *LeaseMissing {
	if m != nil {
		return m.LeaseMissing
	}
	return nil
}

func (m *Error) GetLeaseMismatch() *LeaseMismatch {
	if m != nil {
		return m.LeaseMismatch
	}
	return nil
}

func (m *Error) GetLeaseReadNotReady() *LeaseReadNotReady {
	if m != nil {
		return m.LeaseReadNotReady
	}
	return nil
}

func init() {
	proto.RegisterType((*NotLeader)(nil), "errorpb.NotLeader")
	proto.RegisterType((*StoreMismatch)(nil), "errorpb.StoreMismatch")
	proto.RegisterType((*ShardUnavailable)(nil), "errorpb.ShardUnavailable")
	proto.RegisterType((*ShardNotFound)(nil), "errorpb.ShardNotFound")
	proto.RegisterType((*KeyNotInShard)(nil), "errorpb.KeyNotInShard")
	proto.RegisterType((*StaleEpoch)(nil), "errorpb.StaleEpoch")
	proto.RegisterType((*ServerIsBusy)(nil), "errorpb.ServerIsBusy")
	proto.RegisterType((*StaleCommand)(nil), "errorpb.StaleCommand")
	proto.RegisterType((*RaftEntryTooLarge)(nil), "errorpb.RaftEntryTooLarge")
	proto.RegisterType((*LeaseMissing)(nil), "errorpb.LeaseMissing")
	proto.RegisterType((*LeaseMismatch)(nil), "errorpb.LeaseMismatch")
	proto.RegisterType((*LeaseReadNotReady)(nil), "errorpb.LeaseReadNotReady")
	proto.RegisterType((*Error)(nil), "errorpb.Error")
}

func init() { proto.RegisterFile("errorpb.proto", fileDescriptor_390aa86757fd1154) }

var fileDescriptor_390aa86757fd1154 = []byte{
	// 674 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0xdf, 0x6e, 0xd3, 0x3e,
	0x18, 0x5d, 0xf6, 0xa7, 0xfb, 0xf5, 0x6b, 0xf3, 0x5b, 0xe7, 0x01, 0x32, 0x13, 0x2a, 0x53, 0xae,
	0x86, 0xc4, 0x56, 0xe8, 0x24, 0xa4, 0x49, 0x08, 0xa4, 0x41, 0xa7, 0x4d, 0x1b, 0xbb, 0x70, 0xc7,
	0x03, 0x38, 0x8d, 0x97, 0x46, 0x24, 0x71, 0xb1, 0xdd, 0x41, 0x79, 0x01, 0x6e, 0x78, 0xb0, 0x5d,
	0xee, 0x09, 0x10, 0xec, 0x49, 0x90, 0x9d, 0x3f, 0x75, 0x52, 0x6d, 0x57, 0xc9, 0xe7, 0xef, 0x9c,
	0xe3, 0xf8, 0xf8, 0x7c, 0x01, 0x97, 0x09, 0xc1, 0xc5, 0xc4, 0xdf, 0x9f, 0x08, 0xae, 0x38, 0x5a,
	0xcf, 0xcb, 0xed, 0xc3, 0x30, 0x52, 0xe3, 0xa9, 0xbf, 0x3f, 0xe2, 0x49, 0x2f, 0xa1, 0x4a, 0x44,
	0xdf, 0xb9, 0x88, 0xc2, 0x28, 0xcd, 0x8b, 0xd1, 0xd4, 0x67, 0xbd, 0x89, 0xdf, 0x4b, 0x98, 0xa2,
	0xe5, 0x23, 0xd3, 0xd8, 0xde, 0xb3, 0xa8, 0x21, 0x0f, 0x79, 0xcf, 0x2c, 0xfb, 0xd3, 0x2b, 0x53,
	0x99, 0xc2, 0xbc, 0x65, 0x70, 0xef, 0x12, 0x9a, 0x17, 0x5c, 0x9d, 0x33, 0x1a, 0x30, 0x81, 0x30,
	0xac, 0xcb, 0x31, 0x15, 0xc1, 0xe9, 0x47, 0xec, 0xec, 0x38, 0xbb, 0xab, 0xa4, 0x28, 0xd1, 0x1e,
	0x34, 0x62, 0x83, 0xc1, 0xcb, 0x3b, 0xce, 0x6e, 0xab, 0xbf, 0xb1, 0x9f, 0x6f, 0x4a, 0xd8, 0x24,
	0x8e, 0x46, 0xf4, 0x68, 0xf5, 0xe6, 0xf7, 0xf3, 0x25, 0x92, 0x83, 0xbc, 0x0d, 0x70, 0x87, 0x8a,
	0x0b, 0xf6, 0x29, 0x92, 0x09, 0x55, 0xa3, 0xb1, 0xf7, 0x12, 0x3a, 0x43, 0x2d, 0xf5, 0x39, 0xa5,
	0xd7, 0x34, 0x8a, 0xa9, 0x1f, 0xb3, 0xfb, 0x77, 0xf3, 0x5e, 0x80, 0x6b, 0xd0, 0x17, 0x5c, 0x1d,
	0xf3, 0x69, 0x1a, 0x3c, 0x00, 0x1d, 0x81, 0x7b, 0xc6, 0x66, 0x17, 0x5c, 0x9d, 0xa6, 0x86, 0x82,
	0x3a, 0xb0, 0xf2, 0x85, 0xcd, 0x0c, 0xac, 0x4d, 0xf4, 0xab, 0x4d, 0x5e, 0xae, 0x9e, 0xea, 0x11,
	0xac, 0x49, 0x45, 0x85, 0xc2, 0x2b, 0x06, 0x9d, 0x15, 0x5a, 0x81, 0xa5, 0x01, 0x5e, 0xcd, 0x14,
	0x58, 0x1a, 0x78, 0xef, 0x01, 0x86, 0x8a, 0xc6, 0x6c, 0x30, 0xe1, 0xa3, 0x31, 0x7a, 0x0d, 0xcd,
	0x94, 0x7d, 0x33, 0xbb, 0x49, 0xec, 0xec, 0xac, 0xec, 0xb6, 0xfa, 0x6e, 0x61, 0x87, 0x59, 0xcd,
	0xcd, 0x98, 0xa3, 0xbc, 0xff, 0xa1, 0x3d, 0x64, 0xe2, 0x9a, 0x89, 0x53, 0x79, 0x34, 0x95, 0x33,
	0x53, 0x6b, 0xc1, 0x0f, 0x3c, 0x49, 0x68, 0x1a, 0x78, 0x67, 0xb0, 0x49, 0xe8, 0x95, 0x1a, 0xa4,
	0x4a, 0xcc, 0x2e, 0x39, 0x3f, 0xa7, 0x22, 0x7c, 0xc0, 0x1f, 0xf4, 0x0c, 0x9a, 0x4c, 0x43, 0x87,
	0xd1, 0x0f, 0x96, 0x9f, 0x69, 0xbe, 0xe0, 0x1d, 0x43, 0xfb, 0x9c, 0x51, 0xa9, 0xcd, 0x97, 0x51,
	0x1a, 0x3e, 0xac, 0x23, 0xb2, 0xfb, 0x2b, 0xbd, 0x99, 0x2f, 0x78, 0x3f, 0x1d, 0x70, 0x0b, 0x21,
	0x73, 0x8b, 0xe8, 0x0d, 0xb4, 0x05, 0xfb, 0x3a, 0x65, 0x52, 0x99, 0x75, 0x23, 0xd7, 0xea, 0xa3,
	0xe2, 0xf0, 0xc6, 0x1e, 0xd3, 0x21, 0x15, 0x1c, 0x7a, 0x07, 0x9d, 0x5c, 0xf6, 0x84, 0xc5, 0x41,
	0xc6, 0x5d, 0xbe, 0x97, 0xbb, 0x80, 0xf5, 0xb6, 0x60, 0x33, 0x6b, 0x31, 0xaa, 0x33, 0xa1, 0x1f,
	0x33, 0xef, 0x57, 0x03, 0xd6, 0x06, 0x7a, 0x5e, 0xf4, 0x01, 0x13, 0x26, 0x25, 0x0d, 0xb3, 0x2f,
	0x6a, 0x92, 0xa2, 0x44, 0xaf, 0xa0, 0x99, 0x16, 0xe9, 0x2e, 0x77, 0x2c, 0x66, 0xae, 0xcc, 0x3d,
	0x99, 0x83, 0xd0, 0x5b, 0x70, 0xa5, 0x1d, 0x3d, 0x13, 0x8d, 0x56, 0xff, 0x49, 0xc9, 0xaa, 0x04,
	0x93, 0x54, 0xc1, 0x9a, 0x5d, 0x49, 0xa3, 0x09, 0x91, 0xcd, 0xae, 0x74, 0x49, 0x2d, 0xba, 0x07,
	0x00, 0xb2, 0x8c, 0x19, 0x5e, 0x33, 0xd4, 0xad, 0xf9, 0xc6, 0x65, 0x8b, 0x58, 0x30, 0x74, 0x08,
	0x6d, 0x69, 0x45, 0x0b, 0x37, 0x0c, 0xed, 0xf1, 0x9c, 0x66, 0x35, 0x49, 0x05, 0x6a, 0xa8, 0x56,
	0x0a, 0xf1, 0x7a, 0x9d, 0x6a, 0x35, 0x49, 0x05, 0x6a, 0x6c, 0xb2, 0x07, 0x1c, 0xff, 0x57, 0xb7,
	0xc9, 0xee, 0x92, 0x2a, 0x18, 0x9d, 0xc0, 0xa6, 0xa8, 0xc7, 0x1d, 0x37, 0x8d, 0xc2, 0x76, 0xa9,
	0xb0, 0x30, 0x10, 0x64, 0x91, 0x84, 0x06, 0xd0, 0x91, 0xb5, 0xff, 0x0a, 0x06, 0x23, 0xf4, 0xb4,
	0x7a, 0x63, 0x16, 0x80, 0x2c, 0x50, 0xb4, 0x13, 0xb1, 0x35, 0x32, 0xb8, 0x55, 0x73, 0xc2, 0x9e,
	0x27, 0x52, 0x81, 0x6a, 0x27, 0x62, 0x7b, 0x48, 0x70, 0xbb, 0xe6, 0x44, 0x65, 0x84, 0x48, 0x15,
	0xac, 0x9d, 0x88, 0xeb, 0xc9, 0xc6, 0x6e, 0xcd, 0x89, 0x85, 0xec, 0x93, 0x45, 0xd2, 0x51, 0xe7,
	0xf6, 0x6f, 0x77, 0xe9, 0xe6, 0xae, 0xeb, 0xdc, 0xde, 0x75, 0x9d, 0x3f, 0x77, 0x5d, 0xc7, 0x6f,
	0x98, 0x3f, 0xfc, 0xc1, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x48, 0x9f, 0x7a, 0x65, 0x06,
	0x00, 0x00,
}

func (m *NotLeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotLeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShardID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.ShardID))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintErrorpb(dAtA, i, uint64(m.Leader.Size()))
	n1, err := m.Leader.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StoreMismatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoreMismatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShardUnavailable) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardUnavailable) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShardID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.ShardID))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShardNotFound) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardNotFound) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShardID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.ShardID))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *KeyNotInShard) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyNotInShard) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if m.ShardID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.ShardID))
	}
	if len(m.Start) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(len(m.Start)))
		i += copy(dAtA[i:], m.Start)
	}
	if len(m.End) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(len(m.End)))
		i += copy(dAtA[i:], m.End)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StaleEpoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StaleEpoch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.NewShards) > 0 {
		for _, msg := range m.NewShards {
			dAtA[i] = 0xa
			i++
			i = encodeVarintErrorpb(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ServerIsBusy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServerIsBusy) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *StaleCommand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StaleCommand) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RaftEntryTooLarge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftEntryTooLarge) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShardID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.ShardID))
	}
	if m.EntrySize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.EntrySize))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LeaseMissing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaseMissing) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShardID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.ShardID))
	}
	if m.ReplicaID != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.ReplicaID))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LeaseMismatch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaseMismatch) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RequestLease != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.RequestLease.Size()))
		n2, err := m.RequestLease.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.ReplicaHeldLease != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.ReplicaHeldLease.Size()))
		n3, err := m.ReplicaHeldLease.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *LeaseReadNotReady) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LeaseReadNotReady) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if m.NotLeader != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.NotLeader.Size()))
		n4, err := m.NotLeader.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.ShardNotFound != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.ShardNotFound.Size()))
		n5, err := m.ShardNotFound.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if m.KeyNotInShard != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.KeyNotInShard.Size()))
		n6, err := m.KeyNotInShard.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if m.StaleEpoch != nil {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.StaleEpoch.Size()))
		n7, err := m.StaleEpoch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.ServerIsBusy != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.ServerIsBusy.Size()))
		n8, err := m.ServerIsBusy.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	if m.StaleCommand != nil {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.StaleCommand.Size()))
		n9, err := m.StaleCommand.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if m.StoreMismatch != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.StoreMismatch.Size()))
		n10, err := m.StoreMismatch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if m.RaftEntryTooLarge != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.RaftEntryTooLarge.Size()))
		n11, err := m.RaftEntryTooLarge.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	if m.ShardUnavailable != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.ShardUnavailable.Size()))
		n12, err := m.ShardUnavailable.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if m.LeaseMissing != nil {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.LeaseMissing.Size()))
		n13, err := m.LeaseMissing.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if m.LeaseMismatch != nil {
		dAtA[i] = 0x62
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.LeaseMismatch.Size()))
		n14, err := m.LeaseMismatch.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	if m.LeaseReadNotReady != nil {
		dAtA[i] = 0x6a
		i++
		i = encodeVarintErrorpb(dAtA, i, uint64(m.LeaseReadNotReady.Size()))
		n15, err := m.LeaseReadNotReady.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintErrorpb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NotLeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardID != 0 {
		n += 1 + sovErrorpb(uint64(m.ShardID))
	}
	l = m.Leader.Size()
	n += 1 + l + sovErrorpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StoreMismatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardUnavailable) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardID != 0 {
		n += 1 + sovErrorpb(uint64(m.ShardID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardNotFound) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardID != 0 {
		n += 1 + sovErrorpb(uint64(m.ShardID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *KeyNotInShard) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.ShardID != 0 {
		n += 1 + sovErrorpb(uint64(m.ShardID))
	}
	l = len(m.Start)
	if l > 0 {
		n += 1 + l + sovErrorpb(uint64(l))
	}
	l = len(m.End)
	if l > 0 {
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StaleEpoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NewShards) > 0 {
		for _, e := range m.NewShards {
			l = e.Size()
			n += 1 + l + sovErrorpb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ServerIsBusy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StaleCommand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RaftEntryTooLarge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardID != 0 {
		n += 1 + sovErrorpb(uint64(m.ShardID))
	}
	if m.EntrySize != 0 {
		n += 1 + sovErrorpb(uint64(m.EntrySize))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LeaseMissing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardID != 0 {
		n += 1 + sovErrorpb(uint64(m.ShardID))
	}
	if m.ReplicaID != 0 {
		n += 1 + sovErrorpb(uint64(m.ReplicaID))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LeaseMismatch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestLease != nil {
		l = m.RequestLease.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.ReplicaHeldLease != nil {
		l = m.ReplicaHeldLease.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LeaseReadNotReady) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.NotLeader != nil {
		l = m.NotLeader.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.ShardNotFound != nil {
		l = m.ShardNotFound.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.KeyNotInShard != nil {
		l = m.KeyNotInShard.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.StaleEpoch != nil {
		l = m.StaleEpoch.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.ServerIsBusy != nil {
		l = m.ServerIsBusy.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.StaleCommand != nil {
		l = m.StaleCommand.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.StoreMismatch != nil {
		l = m.StoreMismatch.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.RaftEntryTooLarge != nil {
		l = m.RaftEntryTooLarge.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.ShardUnavailable != nil {
		l = m.ShardUnavailable.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.LeaseMissing != nil {
		l = m.LeaseMissing.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.LeaseMismatch != nil {
		l = m.LeaseMismatch.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.LeaseReadNotReady != nil {
		l = m.LeaseReadNotReady.Size()
		n += 1 + l + sovErrorpb(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovErrorpb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozErrorpb(x uint64) (n int) {
	return sovErrorpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NotLeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotLeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotLeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Leader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErrorpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Leader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoreMismatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoreMismatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoreMismatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardUnavailable) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardUnavailable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardUnavailable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardNotFound) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardNotFound: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardNotFound: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyNotInShard) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyNotInShard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyNotInShard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthErrorpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthErrorpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Start = append(m.Start[:0], dAtA[iNdEx:postIndex]...)
			if m.Start == nil {
				m.Start = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthErrorpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.End = append(m.End[:0], dAtA[iNdEx:postIndex]...)
			if m.End == nil {
				m.End = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StaleEpoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StaleEpoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StaleEpoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewShards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErrorpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewShards = append(m.NewShards, metapb.Shard{})
			if err := m.NewShards[len(m.NewShards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServerIsBusy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServerIsBusy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServerIsBusy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StaleCommand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StaleCommand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StaleCommand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftEntryTooLarge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftEntryTooLarge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftEntryTooLarge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntrySize", wireType)
			}
			m.EntrySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntrySize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaseMissing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaseMissing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaseMissing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaID", wireType)
			}
			m.ReplicaID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplicaID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaseMismatch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaseMismatch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaseMismatch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestLease", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErrorpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RequestLease == nil {
				m.RequestLease = &metapb.EpochLease{}
			}
			if err := m.RequestLease.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplicaHeldLease", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErrorpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ReplicaHeldLease == nil {
				m.ReplicaHeldLease = &metapb.EpochLease{}
			}
			if err := m.ReplicaHeldLease.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LeaseReadNotReady) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LeaseReadNotReady: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LeaseReadNotReady: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErrorpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NotLeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErrorpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NotLeader == nil {
				m.NotLeader = &NotLeader{}
			}
			if err := m.NotLeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardNotFound", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErrorpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShardNotFound == nil {
				m.ShardNotFound = &ShardNotFound{}
			}
			if err := m.ShardNotFound.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyNotInShard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErrorpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyNotInShard == nil {
				m.KeyNotInShard = &KeyNotInShard{}
			}
			if err := m.KeyNotInShard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaleEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErrorpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StaleEpoch == nil {
				m.StaleEpoch = &StaleEpoch{}
			}
			if err := m.StaleEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerIsBusy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErrorpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServerIsBusy == nil {
				m.ServerIsBusy = &ServerIsBusy{}
			}
			if err := m.ServerIsBusy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StaleCommand", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErrorpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StaleCommand == nil {
				m.StaleCommand = &StaleCommand{}
			}
			if err := m.StaleCommand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreMismatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErrorpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StoreMismatch == nil {
				m.StoreMismatch = &StoreMismatch{}
			}
			if err := m.StoreMismatch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaftEntryTooLarge", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErrorpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RaftEntryTooLarge == nil {
				m.RaftEntryTooLarge = &RaftEntryTooLarge{}
			}
			if err := m.RaftEntryTooLarge.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardUnavailable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErrorpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShardUnavailable == nil {
				m.ShardUnavailable = &ShardUnavailable{}
			}
			if err := m.ShardUnavailable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseMissing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErrorpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeaseMissing == nil {
				m.LeaseMissing = &LeaseMissing{}
			}
			if err := m.LeaseMissing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseMismatch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErrorpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeaseMismatch == nil {
				m.LeaseMismatch = &LeaseMismatch{}
			}
			if err := m.LeaseMismatch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaseReadNotReady", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthErrorpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthErrorpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LeaseReadNotReady == nil {
				m.LeaseReadNotReady = &LeaseReadNotReady{}
			}
			if err := m.LeaseReadNotReady.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErrorpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthErrorpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipErrorpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowErrorpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErrorpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthErrorpb
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthErrorpb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowErrorpb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipErrorpb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthErrorpb
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthErrorpb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowErrorpb   = fmt.Errorf("proto: integer overflow")
)
