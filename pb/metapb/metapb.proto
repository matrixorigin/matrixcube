syntax = "proto3";
package metapb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_enum_prefix_all) = true;

// Action the action while a new node join the cluster
enum Action {
    None     = 0;
    ScaleOut = 1;
}

// ResourceKind the resource king
enum ResourceKind {
    LeaderKind     = 0;
    ReplicaKind    = 1;
}

// State the container state
enum ContainerState {
    // UP is normal state
    UP        = 0;
    // Offline is the unavailable state
    Offline   = 1;
    // Tombstone is the destroy state
    Tombstone = 2;
}

// ResourceState the resource state
enum ResourceState {
    // Running is serve state,
    // this state provides read and write services to the public normally.
    Running        = 0;
    // Creating is waiting to create state, 
    // this state does not provide read and write services to the public.
    Creating       = 1;
    // Destroying is waiting to destroy state,
    // this state normally cannot provide read and write services to the public, 
    // and the destruction process of resources has not yet been completed.
    Destroying     = 2;
    // Destroyed is the destroyed state,
    // this state is normally not available for external read and write services, 
    // the resources have been destroyed in the whole cluster and cannot be used again.
    Destroyed      = 3;
}

// ConfigChangeType change replica type
enum ConfigChangeType {
    AddNode        = 0;
    RemoveNode     = 1;
    UpdateNode     = 2;
    AddLearnerNode = 3;
    ScalePeer      = 4;
}

// ReplicaRole role of current replica
enum ReplicaRole {
    Voter         = 0;
    Learner       = 1;
    IncomingVoter = 2;
    DemotingVoter = 3;
}

// CheckPolicy check policy
enum CheckPolicy {
    SCAN        = 0;
    APPROXIMATE = 1;
    USEKEY      = 2;
}

// OperatorStatus Operator Status
enum OperatorStatus {
    SUCCESS = 0;
	TIMEOUT = 1;
	CANCEL  = 2;
	REPLACE = 3;
	RUNNING = 4;
}

// JobType job type
enum JobType {
    // RemoveResource remove resource job
    RemoveResource = 0;
    // CreateResourcePool create resource pool
    CreateResourcePool = 1;
    // CustomStartAt custom job
	CustomStartAt = 100;
}

// JobState job state
enum JobState {
    // Created wait to running
    Created = 0;
    // Working job is working
    Working = 1;
    // Completed job completed, need to gc
	Completed = 2;
}

// ResourceEpoch resource epoch
message ResourceEpoch {
    // Conf change version, auto increment when add or remove replica
    uint64 confVer = 1;
    // Resource version, auto increment when split or merge
    uint64 version = 2;
}

// Replica of the resource
message Replica {
    uint64   id            = 1 [(gogoproto.customname) = "ID"];
    uint64   containerID   = 2;
    ReplicaRole role          = 3;
    bool     initialMember = 4;
}

// ReplicaStats replica stats
message ReplicaStats {
  Replica   replica        = 1 [(gogoproto.nullable) = false];
	uint64 downSeconds = 2;
}

// Pair key value pair
message Pair {
    string key   = 1;
    string value = 2;
}

// ResourceStats resource stats
message ResourceStats {
    // resource ID
    uint64       resourceID      = 1;
    // bytes written during this period
	uint64       writtenBytes    = 2;
	// keys written during this period
	uint64       writtenKeys     = 3;
    // bytes read during this period
	uint64       readBytes       = 4;     
	// keys read during this period
	uint64       readKeys        = 5;
	// approximate data size in bytes of the resource
	uint64       approximateSize = 6;
	// approximate count of keys in the resource
	uint64       approximateKeys = 7;
    // Actually reported time interval
    TimeInterval interval        = 8;
}

// ContainerStats container stats
message ContainerStats {
             // Container id
             uint64       containerID        = 1;
             // When the container is started (unix timestamp in seconds).
             uint64       startTime          = 2;
             // Actually reported time interval
             TimeInterval interval           = 3;
             // Capacity for the container.
             uint64       capacity           = 4;
             // Available size for the container.
             uint64       available          = 5;
             // Actually used space by db
             uint64       usedSize           = 6;
             // If the container is busy
             bool         isBusy             = 7;
             // Total resource count in this container.
             uint64       resourceCount      = 8;
             // Current sending snapshot count.
             uint64       sendingSnapCount   = 9;
             // Current receiving snapshot count.
             uint64       receivingSnapCount = 10;
             // How many resource is applying snapshot.
             uint64       applyingSnapCount  = 11;
             // Bytes written for the container during this period.
             uint64       writtenBytes       = 12;
             // Bytes read for the container during this period.
             uint64       readBytes          = 13;
             // Bytes written for the container during this period.
             uint64       writtenKeys        = 14;
             // Bytes read for the container during this period.
             uint64       readKeys           = 15;
    // Threads' CPU usages in the container
    repeated RecordPair   cpuUsages          = 16 [(gogoproto.nullable) = false];
    // Threads' read disk I/O rates in the container
    repeated RecordPair   readIORates        = 17 [(gogoproto.nullable) = false];
    // Threads' write disk I/O rates in the container
    repeated RecordPair   writeIORates       = 18 [(gogoproto.nullable) = false];
    // Operations' latencies in the container
    repeated RecordPair   opLatencies        = 19 [(gogoproto.nullable) = false];
}

// RecordPair record pair
message RecordPair {
    string key   = 1;
    uint64 value = 2;
}

// Member prophet member
message Member {
    uint64 id   = 1 [(gogoproto.customname) = "ID"];
    string name = 2;
    string addr = 3;
}

// Cluster prophet cluster
message Cluster {
    uint64 id           = 1 [(gogoproto.customname) = "ID"];
    uint32 maxReplicaCount = 2;
}

// TimeInterval time interval
message TimeInterval {
    // The unix timestamp in seconds of the start of this period.
    uint64 start = 1;
    // The unix timestamp in seconds of the end of this period.
    uint64 end   = 2;
}

// Job job 
message Job {
    JobType type    = 1;
    bytes   content = 2;
    JobState state  = 3;
}

// RemoveResourceJob remove resources job
message RemoveResourceJob {
    uint64        resourceID = 1 [(gogoproto.customname) = "ID"];
    repeated Replica replicass      = 2 [(gogoproto.nullable) = false];
}

// ResourcePoolJob resource pool job
message ResourcePoolJob {
    repeated ResourcePool pools = 1 [(gogoproto.nullable) = false];
}

// ResourcePool resource pool
message ResourcePool {
    uint64 group       = 1;
    uint64 capacity    = 2;
    bytes  rangePrefix = 3;
}

// DestroyingStatus destroying status
message DestroyingStatus {
    uint64 index = 1;
    map<uint64, bool> replicas  = 2;
    ResourceState state = 3;
    bool             removeData = 4;
}

// ResourceExtra resource extra
message ResourceExtra {
    map<string, string> labels           = 1;
    DestroyingStatus    destroyingStatus = 2;
}

// ScheduleGroupRule resoruce group rule
message ScheduleGroupRule {
    uint64 id           = 1 [(gogoproto.customname) = "ID"];
    uint64 groupID      = 2;
    string name         = 3;
    string groupByLabel = 4;
}
