syntax = "proto3";
package metapb;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "go.etcd.io/etcd/raft/v3/raftpb/raft.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_enum_prefix_all) = true;

// ShardKind the shard kind
enum ShardType {
    LeaderOnly = 0;
    AllShards  = 1;
}

// StoreState the store state
enum StoreState {
    // Up is normal state
    Up              = 0;
    // Down is the unavailable state
    Down            = 1;
    // Tombstone is the destroy state
    StoreTombstone  = 2;
}

// ShardState the shard state
enum ShardState {
    // Running is serve state,
    // this state provides read and write services to the public normally.
    Running        = 0;
    // Creating is waiting to create state, 
    // this state does not provide read and write services to the public.
    Creating       = 1;
    // Destroying is waiting to destroy state,
    // this state normally cannot provide read and write services to the public, 
    // and the destruction process of shards has not yet been completed.
    Destroying     = 2;
    // Destroyed is the destroyed state,
    // this state is normally not available for external read and write services, 
    // the shards have been destroyed in the whole cluster and cannot be used again.
    Destroyed      = 3;
}

// ConfigChangeType change replica type
enum ConfigChangeType {
    AddNode        = 0;
    RemoveNode     = 1;
    UpdateNode     = 2;
    AddLearnerNode = 3;
}

// ReplicaRole role of current replica
enum ReplicaRole {
    Voter         = 0;
    Learner       = 1;
    IncomingVoter = 2;
    DemotingVoter = 3;
}

// CheckPolicy check policy
enum CheckPolicy {
    SCAN        = 0;
    APPROXIMATE = 1;
    USEKEY      = 2;
}

// OperatorStatus Operator Status
enum OperatorStatus {
    SUCCESS = 0;
    TIMEOUT = 1;
    CANCEL  = 2;
    REPLACE = 3;
    RUNNING = 4;
}

// JobType job type
enum JobType {
    // RemoveShard remove shard job
    RemoveShard = 0;
    // CreateShardPool create shard pool
    CreateShardPool = 1;
    // CustomStartAt custom job
    CustomStartAt = 100;
}

// JobState job state
enum JobState {
    // Created wait to running
    Created = 0;
    // Working job is working
    Working = 1;
    // Completed job completed, need to gc
    Completed = 2;
}

// ShardEpoch shard epoch
message ShardEpoch {
    // Conf change version, auto increment when add or remove replica
    uint64 configVer  = 1;
    // Shard generation, auto increment when split or merge
    uint64 generation = 2;
}

// Replica of the shard
message Replica {
    uint64      id              = 1 [(gogoproto.customname) = "ID"];
    uint64      storeID         = 2;
    ReplicaRole role            = 3;
    bool        initialMember   = 4;
}

// ReplicaStats replica stats
message ReplicaStats {
  Replica   replica         = 1 [(gogoproto.nullable) = false];
	uint64    downSeconds     = 2;
}

// Label key value label
message Label {
    string key   = 1;
    string value = 2;
}

// ShardStats shard stats
message ShardStats {
    // shard ID
    uint64       shardID      = 1;
    // bytes written during this period
    uint64       writtenBytes    = 2;
    // keys written during this period
    uint64       writtenKeys     = 3;
    // bytes read during this period
    uint64       readBytes       = 4;
    // keys read during this period
    uint64       readKeys        = 5;
    // approximate data size in bytes of the shard
    uint64       approximateSize = 6;
    // approximate count of keys in the shard
    uint64       approximateKeys = 7;
    // Actually reported time interval
    TimeInterval interval        = 8;
}

// StoreStats store stats
message StoreStats {
     // Store id
     uint64       storeID               = 1;
     // When the store is started (unix timestamp in seconds).
     uint64       startTime             = 2;
     // Actually reported time interval
     TimeInterval interval              = 3;
     // Capacity for the store.
     uint64       capacity              = 4;
     // Available size for the store.
     uint64       available             = 5;
     // Actually used space by db
     uint64       usedSize              = 6;
     // If the store is busy
     bool         isBusy                = 7;
     // Total shard count in this store.
     uint64       shardCount            = 8;
     // Current sending snapshot count.
     uint64       sendingSnapCount      = 9;
     // Current receiving snapshot count.
     uint64       receivingSnapCount    = 10;
     // How many shard is applying snapshot.
     uint64       applyingSnapCount     = 11;
     // Bytes written for the store during this period.
     uint64       writtenBytes          = 12;
     // Bytes read for the store during this period.
     uint64       readBytes             = 13;
     // Bytes written for the store during this period.
     uint64       writtenKeys           = 14;
     // Bytes read for the store during this period.
     uint64       readKeys              = 15;
    // Threads' CPU usages in the store
    repeated RecordPair   cpuUsages     = 16 [(gogoproto.nullable) = false];
    // Threads' read disk I/O rates in the store
    repeated RecordPair   readIORates   = 17 [(gogoproto.nullable) = false];
    // Threads' write disk I/O rates in the store
    repeated RecordPair   writeIORates  = 18 [(gogoproto.nullable) = false];
    // Operations' latencies in the store
    repeated RecordPair   opLatencies   = 19 [(gogoproto.nullable) = false];
}

// RecordPair record pair
message RecordPair {
    string key   = 1;
    uint64 value = 2;
}

// Member prophet member
message Member {
    uint64 id   = 1 [(gogoproto.customname) = "ID"];
    string name = 2;
    string addr = 3;
}

// ProphetCluster prophet cluster
message ProphetCluster {
    uint64 id              = 1 [(gogoproto.customname) = "ID"];
    uint32 maxReplicaCount = 2;
}

// TimeInterval time interval
message TimeInterval {
    // The unix timestamp in seconds of the start of this period.
    uint64 start = 1;
    // The unix timestamp in seconds of the end of this period.
    uint64 end   = 2;
}

// Job job 
message Job {
    JobType  type    = 1;
    bytes    content = 2;
    JobState state   = 3;
}

// RemoveShardJob remove shards job
message RemoveShardJob {
    uint64           shardID  = 1 [(gogoproto.customname) = "ID"];
    repeated Replica replicas = 2 [(gogoproto.nullable) = false];
}

// ShardPoolJob shard pool job
message ShardPoolJob {
    repeated ShardPoolJobMeta pools = 1 [(gogoproto.nullable) = false];
}

// ShardPoolJobMeta shard pool
message ShardPoolJobMeta {
    uint64 group       = 1;
    uint64 capacity    = 2;
    bytes  rangePrefix = 3;
}

// DestroyingStatus destroying status
message DestroyingStatus {
    uint64            index      = 1;
    map<uint64, bool> replicas   = 2;
    ShardState        state      = 3;
    bool              removeData = 4;
}

// ShardExtra shard extra
message ShardExtra {
    map<string, string> labels           = 1;
    DestroyingStatus    destroyingStatus = 2;
}

// ScheduleGroupRule resoruce group rule
message ScheduleGroupRule {
    uint64 id           = 1 [(gogoproto.customname) = "ID"];
    uint64 groupID      = 2;
    string name         = 3;
    string groupByLabel = 4;
}

// RaftMessageBatch is a group of messages sent to the same store.
message RaftMessageBatch {
    repeated RaftMessage messages = 1 [(gogoproto.nullable) = false];
}

// RaftMessage the message wrapped raft msg with shard info
message RaftMessage  {
    uint64               shardID      = 1;
    uint64               group        = 2;
    metapb.Replica       from         = 3 [(gogoproto.nullable) = false];
    metapb.Replica       to           = 4 [(gogoproto.nullable) = false];
    raftpb.Message       message      = 5 [(gogoproto.nullable) = false];
    metapb.ShardEpoch shardEpoch   = 6 [(gogoproto.nullable) = false];
    bool                 isTombstone  = 7;
    bytes                start        = 8;
    bytes                end          = 9;
    string               unique       = 10;
    repeated string      ruleGroups   = 11;
    uint64               commitIndex  = 12;
    uint64               sendTime     = 13;
}

message SnapshotChunk {
    uint64 storeID       = 1;
    uint64 shardID       = 2;
    uint64 replicaID     = 3;
    uint64 from          = 4;
    uint64 chunkID       = 5;
    uint64 chunkSize     = 6;
    uint64 chunkCount    = 7;
    uint64 index         = 8;
    uint64 term          = 9;
    string filePath      = 10;
    uint64 fileSize      = 11;
    uint64 fileChunkID   = 12;
    uint64 fileChunkCount = 13;
    bytes data            = 14;
    bytes extra           = 15;
    raftpb.ConfState confState = 16 [(gogoproto.nullable) = false];
}

// StoreIdent store ident
message StoreIdent {
    uint64 clusterID = 1;
    uint64 storeID   = 2;
}

// Shard a shard [start,end) of the data
message Shard {
    uint64                   id              = 1 [(gogoproto.customname) = "ID"];
    bytes                    start           = 2;
    bytes                    end             = 3;
    metapb.ShardEpoch        epoch           = 4 [(gogoproto.nullable) = false];
    metapb.ShardState        state           = 5;
    repeated metapb.Replica  replicas        = 6 [(gogoproto.nullable) = false];
    uint64                   group           = 7;
    string                   unique          = 8;
    repeated string          ruleGroups      = 9;
    repeated metapb.Label    labels          = 10 [(gogoproto.nullable) = false];
}

// ReplicaState the state of the shard peer
enum ReplicaState {
    Normal    = 0;
    Applying  = 1;
    ReplicaTombstone = 2;
}

// LogIndex is used to indicate a position in the log.
message LogIndex {
    uint64 index = 1;
    uint64 term = 2;
}

// ShardMetadata is the metadata of the shard consistent with the current table
// shard data
message ShardMetadata {
    uint64 shardID  = 1;
    uint64 logIndex = 2;
    ShardLocalState metadata  = 3 [(gogoproto.nullable) = false];
}

// ShardLocalState shard local state
message ShardLocalState {
    Shard     shard = 1 [(gogoproto.nullable) = false];
    ReplicaState state = 2;
    // RemoveData Whether or not the local Shard data needs to be deleted,
    // which needs to be specified when the Shard status is set to Destroying
    bool removeData = 3;
}

// Store the host store metadata
message Store {
    uint64                id                  = 1 [(gogoproto.customname) = "ID"];
    string                raftAddress         = 2;
    string                clientAddress       = 3;
    repeated metapb.Label labels              = 4 [(gogoproto.nullable) = false];
    metapb.StoreState     state               = 5;
    int64                 startTime           = 6;
    int64                 lastHeartbeatTime   = 7;
    string                version             = 8;
    string                commitID            = 9;
    string                deployPath          = 10;
    bool                  destroyed           = 11;
}

// ShardsPool shards pool
message ShardsPool {
    map<uint64, ShardPool> pools = 1;
}

// ShardPool shard pool
message ShardPool {
    uint64          capacity                = 1;
    bytes           rangePrefix             = 2;
    repeated AllocatedShard allocatedShards = 3;
    uint64          seq                     = 4;
    uint64          allocatedOffset         = 5;
}

// AllocatedShard allocated shard info
message AllocatedShard {
    uint64 shardID     = 1;
    uint64 allocatedAt = 2;
    bytes  purpose     = 3;
}

// ShardsPoolCmdType shards pool cmd
enum ShardsPoolCmdType {
    CreateShard = 0;
    AllocShard  = 1;
}

// ShardsPoolCmd shards pool cmd
message ShardsPoolCmd {
    ShardsPoolCmdType   type   = 1;
    ShardsPoolCreateCmd create = 2;
    ShardsPoolAllocCmd  alloc  = 3;
}

// ShardsPoolCreateCmd shards pool create cmd
message ShardsPoolCreateCmd {
}

// ShardsPoolAllocCmd shards pool create cmd
message ShardsPoolAllocCmd {
    uint64 group   = 1;
    bytes  purpose = 2;
}

// SnapshotInfo contains additional information associated with a snapshot.
message SnapshotInfo {
    uint64 extra = 1;
    bool   dummy = 2;
}
