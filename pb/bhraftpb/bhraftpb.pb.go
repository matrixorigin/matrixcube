// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: bhraftpb.proto

package bhraftpb

import (
	fmt "fmt"
	io "io"
	math "math"

	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	metapb "github.com/matrixorigin/matrixcube/components/prophet/pb/metapb"
	bhmetapb "github.com/matrixorigin/matrixcube/pb/bhmetapb"
	raftpb "go.etcd.io/etcd/raft/raftpb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// PeerState the state of the shard peer
type PeerState int32

const (
	PeerState_Normal    PeerState = 0
	PeerState_Applying  PeerState = 1
	PeerState_Tombstone PeerState = 2
)

var PeerState_name = map[int32]string{
	0: "Normal",
	1: "Applying",
	2: "Tombstone",
}

var PeerState_value = map[string]int32{
	"Normal":    0,
	"Applying":  1,
	"Tombstone": 2,
}

func (x PeerState) String() string {
	return proto.EnumName(PeerState_name, int32(x))
}

func (PeerState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b31c127a72499666, []int{0}
}

// RaftMessage the message wrapped raft msg with shard info
type RaftMessage struct {
	ShardID              uint64               `protobuf:"varint,1,opt,name=shardID,proto3" json:"shardID,omitempty"`
	Group                uint64               `protobuf:"varint,2,opt,name=group,proto3" json:"group,omitempty"`
	From                 metapb.Peer          `protobuf:"bytes,3,opt,name=from,proto3" json:"from"`
	To                   metapb.Peer          `protobuf:"bytes,4,opt,name=to,proto3" json:"to"`
	Message              raftpb.Message       `protobuf:"bytes,5,opt,name=message,proto3" json:"message"`
	ShardEpoch           metapb.ResourceEpoch `protobuf:"bytes,6,opt,name=shardEpoch,proto3" json:"shardEpoch"`
	IsTombstone          bool                 `protobuf:"varint,7,opt,name=isTombstone,proto3" json:"isTombstone,omitempty"`
	Start                []byte               `protobuf:"bytes,8,opt,name=start,proto3" json:"start,omitempty"`
	End                  []byte               `protobuf:"bytes,9,opt,name=end,proto3" json:"end,omitempty"`
	DisableSplit         bool                 `protobuf:"varint,10,opt,name=disableSplit,proto3" json:"disableSplit,omitempty"`
	Data                 []byte               `protobuf:"bytes,11,opt,name=data,proto3" json:"data,omitempty"`
	DataAppendToMsg      bool                 `protobuf:"varint,12,opt,name=dataAppendToMsg,proto3" json:"dataAppendToMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RaftMessage) Reset()         { *m = RaftMessage{} }
func (m *RaftMessage) String() string { return proto.CompactTextString(m) }
func (*RaftMessage) ProtoMessage()    {}
func (*RaftMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31c127a72499666, []int{0}
}
func (m *RaftMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RaftMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RaftMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftMessage.Merge(m, src)
}
func (m *RaftMessage) XXX_Size() int {
	return m.Size()
}
func (m *RaftMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftMessage.DiscardUnknown(m)
}

var xxx_messageInfo_RaftMessage proto.InternalMessageInfo

func (m *RaftMessage) GetShardID() uint64 {
	if m != nil {
		return m.ShardID
	}
	return 0
}

func (m *RaftMessage) GetGroup() uint64 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *RaftMessage) GetFrom() metapb.Peer {
	if m != nil {
		return m.From
	}
	return metapb.Peer{}
}

func (m *RaftMessage) GetTo() metapb.Peer {
	if m != nil {
		return m.To
	}
	return metapb.Peer{}
}

func (m *RaftMessage) GetMessage() raftpb.Message {
	if m != nil {
		return m.Message
	}
	return raftpb.Message{}
}

func (m *RaftMessage) GetShardEpoch() metapb.ResourceEpoch {
	if m != nil {
		return m.ShardEpoch
	}
	return metapb.ResourceEpoch{}
}

func (m *RaftMessage) GetIsTombstone() bool {
	if m != nil {
		return m.IsTombstone
	}
	return false
}

func (m *RaftMessage) GetStart() []byte {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *RaftMessage) GetEnd() []byte {
	if m != nil {
		return m.End
	}
	return nil
}

func (m *RaftMessage) GetDisableSplit() bool {
	if m != nil {
		return m.DisableSplit
	}
	return false
}

func (m *RaftMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *RaftMessage) GetDataAppendToMsg() bool {
	if m != nil {
		return m.DataAppendToMsg
	}
	return false
}

// ShardLocalState the shard state on the store
type ShardLocalState struct {
	State                PeerState      `protobuf:"varint,1,opt,name=state,proto3,enum=bhraftpb.PeerState" json:"state,omitempty"`
	Shard                bhmetapb.Shard `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ShardLocalState) Reset()         { *m = ShardLocalState{} }
func (m *ShardLocalState) String() string { return proto.CompactTextString(m) }
func (*ShardLocalState) ProtoMessage()    {}
func (*ShardLocalState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31c127a72499666, []int{1}
}
func (m *ShardLocalState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardLocalState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShardLocalState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShardLocalState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardLocalState.Merge(m, src)
}
func (m *ShardLocalState) XXX_Size() int {
	return m.Size()
}
func (m *ShardLocalState) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardLocalState.DiscardUnknown(m)
}

var xxx_messageInfo_ShardLocalState proto.InternalMessageInfo

func (m *ShardLocalState) GetState() PeerState {
	if m != nil {
		return m.State
	}
	return PeerState_Normal
}

func (m *ShardLocalState) GetShard() bhmetapb.Shard {
	if m != nil {
		return m.Shard
	}
	return bhmetapb.Shard{}
}

// RaftLocalState raft local state about raft log
type RaftLocalState struct {
	HardState            raftpb.HardState `protobuf:"bytes,1,opt,name=hardState,proto3" json:"hardState"`
	LastIndex            uint64           `protobuf:"varint,2,opt,name=lastIndex,proto3" json:"lastIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *RaftLocalState) Reset()         { *m = RaftLocalState{} }
func (m *RaftLocalState) String() string { return proto.CompactTextString(m) }
func (*RaftLocalState) ProtoMessage()    {}
func (*RaftLocalState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31c127a72499666, []int{2}
}
func (m *RaftLocalState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftLocalState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RaftLocalState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RaftLocalState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftLocalState.Merge(m, src)
}
func (m *RaftLocalState) XXX_Size() int {
	return m.Size()
}
func (m *RaftLocalState) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftLocalState.DiscardUnknown(m)
}

var xxx_messageInfo_RaftLocalState proto.InternalMessageInfo

func (m *RaftLocalState) GetHardState() raftpb.HardState {
	if m != nil {
		return m.HardState
	}
	return raftpb.HardState{}
}

func (m *RaftLocalState) GetLastIndex() uint64 {
	if m != nil {
		return m.LastIndex
	}
	return 0
}

// RaftTruncatedState raft log truncated state
type RaftTruncatedState struct {
	Index                uint64   `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Term                 uint64   `protobuf:"varint,2,opt,name=term,proto3" json:"term,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RaftTruncatedState) Reset()         { *m = RaftTruncatedState{} }
func (m *RaftTruncatedState) String() string { return proto.CompactTextString(m) }
func (*RaftTruncatedState) ProtoMessage()    {}
func (*RaftTruncatedState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31c127a72499666, []int{3}
}
func (m *RaftTruncatedState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftTruncatedState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RaftTruncatedState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RaftTruncatedState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftTruncatedState.Merge(m, src)
}
func (m *RaftTruncatedState) XXX_Size() int {
	return m.Size()
}
func (m *RaftTruncatedState) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftTruncatedState.DiscardUnknown(m)
}

var xxx_messageInfo_RaftTruncatedState proto.InternalMessageInfo

func (m *RaftTruncatedState) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *RaftTruncatedState) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

// RaftApplyState raft log applied state
type RaftApplyState struct {
	AppliedIndex         uint64             `protobuf:"varint,1,opt,name=appliedIndex,proto3" json:"appliedIndex,omitempty"`
	TruncatedState       RaftTruncatedState `protobuf:"bytes,2,opt,name=truncatedState,proto3" json:"truncatedState"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *RaftApplyState) Reset()         { *m = RaftApplyState{} }
func (m *RaftApplyState) String() string { return proto.CompactTextString(m) }
func (*RaftApplyState) ProtoMessage()    {}
func (*RaftApplyState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31c127a72499666, []int{4}
}
func (m *RaftApplyState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaftApplyState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RaftApplyState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RaftApplyState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaftApplyState.Merge(m, src)
}
func (m *RaftApplyState) XXX_Size() int {
	return m.Size()
}
func (m *RaftApplyState) XXX_DiscardUnknown() {
	xxx_messageInfo_RaftApplyState.DiscardUnknown(m)
}

var xxx_messageInfo_RaftApplyState proto.InternalMessageInfo

func (m *RaftApplyState) GetAppliedIndex() uint64 {
	if m != nil {
		return m.AppliedIndex
	}
	return 0
}

func (m *RaftApplyState) GetTruncatedState() RaftTruncatedState {
	if m != nil {
		return m.TruncatedState
	}
	return RaftTruncatedState{}
}

// SnapshotMessageHeader snapshot message header
type SnapshotMessageHeader struct {
	Shard                bhmetapb.Shard `protobuf:"bytes,1,opt,name=shard,proto3" json:"shard"`
	From                 metapb.Peer    `protobuf:"bytes,2,opt,name=from,proto3" json:"from"`
	To                   metapb.Peer    `protobuf:"bytes,3,opt,name=to,proto3" json:"to"`
	Term                 uint64         `protobuf:"varint,4,opt,name=term,proto3" json:"term,omitempty"`
	Index                uint64         `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SnapshotMessageHeader) Reset()         { *m = SnapshotMessageHeader{} }
func (m *SnapshotMessageHeader) String() string { return proto.CompactTextString(m) }
func (*SnapshotMessageHeader) ProtoMessage()    {}
func (*SnapshotMessageHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31c127a72499666, []int{5}
}
func (m *SnapshotMessageHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapshotMessageHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnapshotMessageHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SnapshotMessageHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotMessageHeader.Merge(m, src)
}
func (m *SnapshotMessageHeader) XXX_Size() int {
	return m.Size()
}
func (m *SnapshotMessageHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotMessageHeader.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotMessageHeader proto.InternalMessageInfo

func (m *SnapshotMessageHeader) GetShard() bhmetapb.Shard {
	if m != nil {
		return m.Shard
	}
	return bhmetapb.Shard{}
}

func (m *SnapshotMessageHeader) GetFrom() metapb.Peer {
	if m != nil {
		return m.From
	}
	return metapb.Peer{}
}

func (m *SnapshotMessageHeader) GetTo() metapb.Peer {
	if m != nil {
		return m.To
	}
	return metapb.Peer{}
}

func (m *SnapshotMessageHeader) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *SnapshotMessageHeader) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

// SnapshotMessage snapshot message
type SnapshotMessage struct {
	Header               SnapshotMessageHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header"`
	Data                 []byte                `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	First                bool                  `protobuf:"varint,3,opt,name=first,proto3" json:"first,omitempty"`
	Last                 bool                  `protobuf:"varint,4,opt,name=last,proto3" json:"last,omitempty"`
	FileSize             uint64                `protobuf:"varint,5,opt,name=fileSize,proto3" json:"fileSize,omitempty"`
	CheckSum             uint64                `protobuf:"varint,6,opt,name=checkSum,proto3" json:"checkSum,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SnapshotMessage) Reset()         { *m = SnapshotMessage{} }
func (m *SnapshotMessage) String() string { return proto.CompactTextString(m) }
func (*SnapshotMessage) ProtoMessage()    {}
func (*SnapshotMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_b31c127a72499666, []int{6}
}
func (m *SnapshotMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapshotMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnapshotMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SnapshotMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotMessage.Merge(m, src)
}
func (m *SnapshotMessage) XXX_Size() int {
	return m.Size()
}
func (m *SnapshotMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotMessage proto.InternalMessageInfo

func (m *SnapshotMessage) GetHeader() SnapshotMessageHeader {
	if m != nil {
		return m.Header
	}
	return SnapshotMessageHeader{}
}

func (m *SnapshotMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SnapshotMessage) GetFirst() bool {
	if m != nil {
		return m.First
	}
	return false
}

func (m *SnapshotMessage) GetLast() bool {
	if m != nil {
		return m.Last
	}
	return false
}

func (m *SnapshotMessage) GetFileSize() uint64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *SnapshotMessage) GetCheckSum() uint64 {
	if m != nil {
		return m.CheckSum
	}
	return 0
}

func init() {
	proto.RegisterEnum("bhraftpb.PeerState", PeerState_name, PeerState_value)
	proto.RegisterType((*RaftMessage)(nil), "bhraftpb.RaftMessage")
	proto.RegisterType((*ShardLocalState)(nil), "bhraftpb.ShardLocalState")
	proto.RegisterType((*RaftLocalState)(nil), "bhraftpb.RaftLocalState")
	proto.RegisterType((*RaftTruncatedState)(nil), "bhraftpb.RaftTruncatedState")
	proto.RegisterType((*RaftApplyState)(nil), "bhraftpb.RaftApplyState")
	proto.RegisterType((*SnapshotMessageHeader)(nil), "bhraftpb.SnapshotMessageHeader")
	proto.RegisterType((*SnapshotMessage)(nil), "bhraftpb.SnapshotMessage")
}

func init() { proto.RegisterFile("bhraftpb.proto", fileDescriptor_b31c127a72499666) }

var fileDescriptor_b31c127a72499666 = []byte{
	// 732 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xdd, 0x6a, 0xeb, 0x46,
	0x10, 0x8e, 0xfc, 0x17, 0x7b, 0xec, 0xda, 0xee, 0x36, 0x01, 0x11, 0x82, 0x63, 0x74, 0x11, 0xdc,
	0x96, 0x5a, 0x90, 0xb6, 0x57, 0x25, 0x85, 0x84, 0x16, 0x92, 0x92, 0x94, 0x22, 0xe7, 0x05, 0x56,
	0xd2, 0x5a, 0x12, 0x95, 0xb4, 0xcb, 0x6a, 0x0d, 0x69, 0xaf, 0xfa, 0x2e, 0x7d, 0x8b, 0xf3, 0x00,
	0x87, 0x5c, 0xe6, 0x09, 0x0e, 0xe7, 0xe4, 0x49, 0x0e, 0x3b, 0x5a, 0xc9, 0x72, 0xce, 0x5f, 0xae,
	0x34, 0x33, 0xfb, 0xcd, 0xec, 0x37, 0xdf, 0xce, 0x08, 0xc6, 0x7e, 0x2c, 0xe9, 0x5a, 0x09, 0x7f,
	0x29, 0x24, 0x57, 0x9c, 0xf4, 0x2b, 0xff, 0xe8, 0x3c, 0x4a, 0x54, 0xbc, 0xf1, 0x97, 0x01, 0xcf,
	0xdc, 0x8c, 0x2a, 0x99, 0xdc, 0x73, 0x99, 0x44, 0x49, 0x6e, 0x9c, 0x60, 0xe3, 0x33, 0x57, 0xf8,
	0xae, 0x1f, 0x67, 0x4c, 0xd1, 0x86, 0x51, 0x16, 0x3a, 0xba, 0x79, 0x41, 0x7a, 0xc0, 0x33, 0xc1,
	0x73, 0x96, 0xab, 0xc2, 0x15, 0x92, 0x8b, 0x98, 0x29, 0x5d, 0xd1, 0xd4, 0xdb, 0xa9, 0xf6, 0x43,
	0xa3, 0x5a, 0xc4, 0x23, 0xee, 0x62, 0xd8, 0xdf, 0xac, 0xd1, 0x43, 0x07, 0x2d, 0x03, 0x3f, 0x8d,
	0xf8, 0x92, 0xa9, 0x20, 0x5c, 0x26, 0xdc, 0xd5, 0x5f, 0x57, 0xf7, 0xe4, 0x96, 0x8d, 0xe1, 0xa7,
	0xc4, 0x39, 0xff, 0xb7, 0x61, 0xe8, 0xd1, 0xb5, 0xba, 0x65, 0x45, 0x41, 0x23, 0x46, 0x6c, 0xd8,
	0x2f, 0x62, 0x2a, 0xc3, 0xeb, 0xdf, 0x6c, 0x6b, 0x6e, 0x2d, 0x3a, 0x5e, 0xe5, 0x92, 0x03, 0xe8,
	0x46, 0x92, 0x6f, 0x84, 0xdd, 0xc2, 0x78, 0xe9, 0x90, 0x53, 0xe8, 0xac, 0x25, 0xcf, 0xec, 0xf6,
	0xdc, 0x5a, 0x0c, 0xcf, 0x46, 0x4b, 0xc3, 0xf9, 0x2f, 0xc6, 0xe4, 0x65, 0xe7, 0xe1, 0xcd, 0xc9,
	0x9e, 0x87, 0xe7, 0xc4, 0x81, 0x96, 0xe2, 0x76, 0xe7, 0x93, 0xa8, 0x96, 0xe2, 0xc4, 0x85, 0xfd,
	0xac, 0xa4, 0x61, 0x77, 0x11, 0x38, 0x59, 0x9a, 0x97, 0x31, 0xec, 0x0c, 0xb6, 0x42, 0x91, 0x5f,
	0x00, 0x90, 0xdd, 0xef, 0x82, 0x07, 0xb1, 0xdd, 0xc3, 0x9c, 0xc3, 0xaa, 0xb8, 0xc7, 0x0a, 0xbe,
	0x91, 0x01, 0xc3, 0x43, 0x93, 0xd9, 0x80, 0x93, 0x39, 0x0c, 0x93, 0xe2, 0x8e, 0x67, 0x7e, 0xa1,
	0x78, 0xce, 0xec, 0xfd, 0xb9, 0xb5, 0xe8, 0x7b, 0xcd, 0x90, 0xee, 0xb8, 0x50, 0x54, 0x2a, 0xbb,
	0x3f, 0xb7, 0x16, 0x23, 0xaf, 0x74, 0xc8, 0x14, 0xda, 0x2c, 0x0f, 0xed, 0x01, 0xc6, 0xb4, 0x49,
	0x1c, 0x18, 0x85, 0x49, 0x41, 0xfd, 0x94, 0xad, 0x44, 0x9a, 0x28, 0x1b, 0xb0, 0xd4, 0x4e, 0x8c,
	0x10, 0xe8, 0x84, 0x54, 0x51, 0x7b, 0x88, 0x69, 0x68, 0x93, 0x05, 0x4c, 0xf4, 0xf7, 0x42, 0x08,
	0x96, 0x87, 0x77, 0xfc, 0xb6, 0x88, 0xec, 0x11, 0xa6, 0x3e, 0x0f, 0x3b, 0x09, 0x4c, 0x56, 0x9a,
	0xf9, 0x0d, 0x0f, 0x68, 0xba, 0x52, 0x54, 0x31, 0xf2, 0x2d, 0x92, 0x53, 0x0c, 0x9f, 0x69, 0x7c,
	0xf6, 0xcd, 0xb2, 0x1e, 0x63, 0xad, 0x2a, 0x62, 0xbc, 0x12, 0x41, 0xbe, 0x87, 0x2e, 0xf6, 0x8d,
	0x2f, 0xa7, 0x55, 0xad, 0x07, 0x15, 0x8b, 0x1a, 0x6d, 0x4a, 0x8c, 0xc3, 0x60, 0xac, 0xe7, 0xa1,
	0x71, 0xd3, 0xcf, 0x30, 0xd0, 0x27, 0xab, 0xfa, 0xb6, 0xe1, 0xd9, 0xd7, 0xd5, 0xc3, 0x5c, 0x55,
	0x07, 0xa6, 0xc8, 0x16, 0x49, 0x8e, 0x61, 0x90, 0xd2, 0x42, 0x5d, 0xe7, 0x21, 0xbb, 0x37, 0x33,
	0xb3, 0x0d, 0x38, 0xbf, 0x02, 0xd1, 0xd7, 0xdc, 0xc9, 0x4d, 0x1e, 0x50, 0xc5, 0x4c, 0xce, 0x01,
	0x74, 0x13, 0xc4, 0x97, 0xb3, 0x57, 0x3a, 0x5a, 0x3b, 0xc5, 0x64, 0x66, 0x8a, 0xa0, 0xed, 0xfc,
	0x67, 0x95, 0x3c, 0x2f, 0x84, 0x48, 0xff, 0x29, 0x93, 0x1d, 0x18, 0x51, 0x21, 0xd2, 0x84, 0x85,
	0xd7, 0x8d, 0x1a, 0x3b, 0x31, 0xf2, 0x07, 0x8c, 0xd5, 0xce, 0x95, 0x46, 0x93, 0xe3, 0xad, 0x7c,
	0x1f, 0xd2, 0x32, 0xbd, 0x3d, 0xcb, 0x74, 0x5e, 0x59, 0x70, 0xb8, 0xca, 0xa9, 0x28, 0x62, 0x5e,
	0xad, 0xcf, 0x15, 0xa3, 0x21, 0x93, 0x5b, 0xc1, 0xad, 0x2f, 0x0b, 0x5e, 0x6f, 0x50, 0xeb, 0x45,
	0x1b, 0xd4, 0xfe, 0xec, 0x06, 0x55, 0x4a, 0x75, 0xb6, 0x4a, 0x6d, 0x35, 0xed, 0x36, 0x34, 0x75,
	0x5e, 0x5b, 0x30, 0x79, 0x46, 0x9e, 0x9c, 0x43, 0x2f, 0xc6, 0x06, 0x0c, 0xef, 0x93, 0xad, 0x28,
	0x1f, 0xed, 0xd3, 0x5c, 0x6c, 0x92, 0xea, 0x11, 0x6f, 0x35, 0x46, 0xfc, 0x00, 0xba, 0xeb, 0x44,
	0x16, 0x0a, 0x79, 0xf7, 0xbd, 0xd2, 0xd1, 0x48, 0x3d, 0x09, 0x48, 0xb3, 0xef, 0xa1, 0x4d, 0x8e,
	0xa0, 0xbf, 0x4e, 0x52, 0xb6, 0x4a, 0xfe, 0x65, 0x86, 0x69, 0xed, 0xeb, 0xb3, 0x20, 0x66, 0xc1,
	0xdf, 0xab, 0x4d, 0x86, 0x5b, 0xde, 0xf1, 0x6a, 0xff, 0xbb, 0x9f, 0x60, 0x50, 0x0f, 0x3c, 0x01,
	0xe8, 0xfd, 0xc9, 0x65, 0x46, 0xd3, 0xe9, 0x1e, 0x19, 0x41, 0x1f, 0x87, 0x23, 0xc9, 0xa3, 0xa9,
	0x45, 0xbe, 0x82, 0x41, 0xbd, 0xd8, 0xd3, 0xd6, 0xe5, 0xf4, 0xf1, 0xdd, 0xcc, 0x7a, 0x78, 0x9a,
	0x59, 0x8f, 0x4f, 0x33, 0xeb, 0xed, 0xd3, 0xcc, 0xf2, 0x7b, 0xf8, 0x3f, 0xfc, 0xf1, 0x7d, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x8e, 0x4f, 0xc2, 0xe2, 0x0f, 0x06, 0x00, 0x00,
}

func (m *RaftMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ShardID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBhraftpb(dAtA, i, uint64(m.ShardID))
	}
	if m.Group != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBhraftpb(dAtA, i, uint64(m.Group))
	}
	dAtA[i] = 0x1a
	i++
	i = encodeVarintBhraftpb(dAtA, i, uint64(m.From.Size()))
	n1, err := m.From.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	dAtA[i] = 0x22
	i++
	i = encodeVarintBhraftpb(dAtA, i, uint64(m.To.Size()))
	n2, err := m.To.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	dAtA[i] = 0x2a
	i++
	i = encodeVarintBhraftpb(dAtA, i, uint64(m.Message.Size()))
	n3, err := m.Message.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x32
	i++
	i = encodeVarintBhraftpb(dAtA, i, uint64(m.ShardEpoch.Size()))
	n4, err := m.ShardEpoch.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if m.IsTombstone {
		dAtA[i] = 0x38
		i++
		if m.IsTombstone {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Start) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintBhraftpb(dAtA, i, uint64(len(m.Start)))
		i += copy(dAtA[i:], m.Start)
	}
	if len(m.End) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintBhraftpb(dAtA, i, uint64(len(m.End)))
		i += copy(dAtA[i:], m.End)
	}
	if m.DisableSplit {
		dAtA[i] = 0x50
		i++
		if m.DisableSplit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Data) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintBhraftpb(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.DataAppendToMsg {
		dAtA[i] = 0x60
		i++
		if m.DataAppendToMsg {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShardLocalState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardLocalState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBhraftpb(dAtA, i, uint64(m.State))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintBhraftpb(dAtA, i, uint64(m.Shard.Size()))
	n5, err := m.Shard.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RaftLocalState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftLocalState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintBhraftpb(dAtA, i, uint64(m.HardState.Size()))
	n6, err := m.HardState.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n6
	if m.LastIndex != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBhraftpb(dAtA, i, uint64(m.LastIndex))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RaftTruncatedState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftTruncatedState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBhraftpb(dAtA, i, uint64(m.Index))
	}
	if m.Term != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintBhraftpb(dAtA, i, uint64(m.Term))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RaftApplyState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaftApplyState) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.AppliedIndex != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintBhraftpb(dAtA, i, uint64(m.AppliedIndex))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintBhraftpb(dAtA, i, uint64(m.TruncatedState.Size()))
	n7, err := m.TruncatedState.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n7
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SnapshotMessageHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotMessageHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintBhraftpb(dAtA, i, uint64(m.Shard.Size()))
	n8, err := m.Shard.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n8
	dAtA[i] = 0x12
	i++
	i = encodeVarintBhraftpb(dAtA, i, uint64(m.From.Size()))
	n9, err := m.From.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n9
	dAtA[i] = 0x1a
	i++
	i = encodeVarintBhraftpb(dAtA, i, uint64(m.To.Size()))
	n10, err := m.To.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n10
	if m.Term != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBhraftpb(dAtA, i, uint64(m.Term))
	}
	if m.Index != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBhraftpb(dAtA, i, uint64(m.Index))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SnapshotMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintBhraftpb(dAtA, i, uint64(m.Header.Size()))
	n11, err := m.Header.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n11
	if len(m.Data) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBhraftpb(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	if m.First {
		dAtA[i] = 0x18
		i++
		if m.First {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Last {
		dAtA[i] = 0x20
		i++
		if m.Last {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FileSize != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintBhraftpb(dAtA, i, uint64(m.FileSize))
	}
	if m.CheckSum != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintBhraftpb(dAtA, i, uint64(m.CheckSum))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintBhraftpb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *RaftMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardID != 0 {
		n += 1 + sovBhraftpb(uint64(m.ShardID))
	}
	if m.Group != 0 {
		n += 1 + sovBhraftpb(uint64(m.Group))
	}
	l = m.From.Size()
	n += 1 + l + sovBhraftpb(uint64(l))
	l = m.To.Size()
	n += 1 + l + sovBhraftpb(uint64(l))
	l = m.Message.Size()
	n += 1 + l + sovBhraftpb(uint64(l))
	l = m.ShardEpoch.Size()
	n += 1 + l + sovBhraftpb(uint64(l))
	if m.IsTombstone {
		n += 2
	}
	l = len(m.Start)
	if l > 0 {
		n += 1 + l + sovBhraftpb(uint64(l))
	}
	l = len(m.End)
	if l > 0 {
		n += 1 + l + sovBhraftpb(uint64(l))
	}
	if m.DisableSplit {
		n += 2
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovBhraftpb(uint64(l))
	}
	if m.DataAppendToMsg {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShardLocalState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovBhraftpb(uint64(m.State))
	}
	l = m.Shard.Size()
	n += 1 + l + sovBhraftpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RaftLocalState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.HardState.Size()
	n += 1 + l + sovBhraftpb(uint64(l))
	if m.LastIndex != 0 {
		n += 1 + sovBhraftpb(uint64(m.LastIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RaftTruncatedState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovBhraftpb(uint64(m.Index))
	}
	if m.Term != 0 {
		n += 1 + sovBhraftpb(uint64(m.Term))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RaftApplyState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AppliedIndex != 0 {
		n += 1 + sovBhraftpb(uint64(m.AppliedIndex))
	}
	l = m.TruncatedState.Size()
	n += 1 + l + sovBhraftpb(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnapshotMessageHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Shard.Size()
	n += 1 + l + sovBhraftpb(uint64(l))
	l = m.From.Size()
	n += 1 + l + sovBhraftpb(uint64(l))
	l = m.To.Size()
	n += 1 + l + sovBhraftpb(uint64(l))
	if m.Term != 0 {
		n += 1 + sovBhraftpb(uint64(m.Term))
	}
	if m.Index != 0 {
		n += 1 + sovBhraftpb(uint64(m.Index))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SnapshotMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Header.Size()
	n += 1 + l + sovBhraftpb(uint64(l))
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovBhraftpb(uint64(l))
	}
	if m.First {
		n += 2
	}
	if m.Last {
		n += 2
	}
	if m.FileSize != 0 {
		n += 1 + sovBhraftpb(uint64(m.FileSize))
	}
	if m.CheckSum != 0 {
		n += 1 + sovBhraftpb(uint64(m.CheckSum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBhraftpb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBhraftpb(x uint64) (n int) {
	return sovBhraftpb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RaftMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBhraftpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardID", wireType)
			}
			m.ShardID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Group", wireType)
			}
			m.Group = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Group |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBhraftpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBhraftpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBhraftpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBhraftpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBhraftpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBhraftpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Message.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardEpoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBhraftpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBhraftpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ShardEpoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsTombstone", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsTombstone = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBhraftpb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBhraftpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Start = append(m.Start[:0], dAtA[iNdEx:postIndex]...)
			if m.Start == nil {
				m.Start = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBhraftpb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBhraftpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.End = append(m.End[:0], dAtA[iNdEx:postIndex]...)
			if m.End == nil {
				m.End = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisableSplit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DisableSplit = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBhraftpb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBhraftpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataAppendToMsg", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataAppendToMsg = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBhraftpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBhraftpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBhraftpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardLocalState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBhraftpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardLocalState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardLocalState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= PeerState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBhraftpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBhraftpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBhraftpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBhraftpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBhraftpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftLocalState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBhraftpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftLocalState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftLocalState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HardState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBhraftpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBhraftpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HardState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastIndex", wireType)
			}
			m.LastIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBhraftpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBhraftpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBhraftpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftTruncatedState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBhraftpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftTruncatedState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftTruncatedState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBhraftpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBhraftpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBhraftpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaftApplyState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBhraftpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaftApplyState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaftApplyState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppliedIndex", wireType)
			}
			m.AppliedIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AppliedIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TruncatedState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBhraftpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBhraftpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TruncatedState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBhraftpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBhraftpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBhraftpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotMessageHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBhraftpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotMessageHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotMessageHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBhraftpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBhraftpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shard.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBhraftpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBhraftpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.From.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBhraftpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBhraftpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.To.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Term", wireType)
			}
			m.Term = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Term |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBhraftpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBhraftpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBhraftpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SnapshotMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBhraftpb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBhraftpb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBhraftpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBhraftpb
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBhraftpb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field First", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.First = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Last = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckSum", wireType)
			}
			m.CheckSum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CheckSum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBhraftpb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBhraftpb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBhraftpb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBhraftpb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBhraftpb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBhraftpb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBhraftpb
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthBhraftpb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBhraftpb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBhraftpb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthBhraftpb
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBhraftpb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBhraftpb   = fmt.Errorf("proto: integer overflow")
)
